[
 {
  "file": "/Users/zhang/Desktop/HouseKeeping 2/SHW/MapVC.swift",
  "offset": 1026,
  "remove": 13289,
  "text": "let width = self.view.frame.width\n        var height = self.view.frame.height\n        //实例化导航条\n        navigationBar = UINavigationBar(frame: CGRectMake(0, 0, width, 64))\n        self.view.addSubview(navigationBar!)\n        print(\"创建导航条详情B\")\n        onMakeNavitem()\n\n        \n        // 地图界面初始化\n        mapView = BMKMapView(frame: CGRectMake(0, 64, width, self.view.frame.height-64))\n         // mapView = BMKMapView(frame: self.view.frame)\n        //mapView.setTranslatesAutoresizingMaskIntoConstraints(false)\n        self.view.addSubview(mapView)\n        //self.view = mapView\n        // 界面初始化\n        mapView.zoomLevel = 11\n        print(\"dingweibu\")\n        // 设置定位精确度，默认：kCLLocationAccuracyBest\n        BMKLocationService.setLocationDesiredAccuracy(kCLLocationAccuracyBest)\n        //指定最小距离更新(米)，默认：kCLDistanceFilterNone\n        BMKLocationService.setLocationDistanceFilter(10)\n        // 定位功能初始化\n        locationService = BMKLocationService()\n        print(\"开始定位\")\n        locationService.startUserLocationService()\n        mapView.showsUserLocation = true //显示定位图层\n        \n        // 创建地图视图约束\n        var constraints = [NSLayoutConstraint]()\n        constraints.append(NSLayoutConstraint(item: mapView, attribute: .Leading, relatedBy: .Equal, toItem: view, attribute: .Leading, multiplier: 1, constant: 0))\n        constraints.append(NSLayoutConstraint(item: mapView, attribute: .Trailing, relatedBy: .Equal, toItem: view, attribute: .Trailing, multiplier: 1, constant: 0))\n        constraints.append(NSLayoutConstraint(item: mapView, attribute: .Bottom, relatedBy: .Equal, toItem: view, attribute: .Bottom, multiplier: 1, constant: 0))\n        //constraints.append(NSLayoutConstraint(item: mapView, attribute: .Top, relatedBy: .Equal, toItem: navigationBar, attribute: .Bottom, multiplier: 1, constant: 8))\n        self.view.addConstraints(constraints)\n    }\n    \n    \n    \n    //导航条详情\n    func reply (){\n        self.dismissViewControllerAnimated(true, completion: nil)\n    }\n    func onMakeNavitem() -> UINavigationItem{\n        print(\"创建导航条step1b\")\n        //创建一个导航项\n        let navigationItem = UINavigationItem()\n        //创建左边.右边按钮\n        let leftButton =  UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Reply, target: self, action: \"reply\")\n        \n        \n        \n        let rightButton =  UIBarButtonItem(title: \"返回列表\", style: UIBarButtonItemStyle.Bordered, target: self, action: \"reply\")\n        //导航栏的标题\n        navigationItem.title = \"找附近\"\n        //设置导航栏左边按钮\n        navigationItem.setLeftBarButtonItem(leftButton, animated: true)\n        navigationItem.setRightBarButtonItem(rightButton, animated: true)\n        navigationBar?.pushNavigationItem(navigationItem, animated: true)\n        return navigationItem\n    }\n    \n    \n    \n    // MARK: - 添加覆盖物操作\n    \n \n    \n//    /// 添加标注\n    func addPointAnnotation() {\n//                pointAnnotation = BMKPointAnnotation()\n//                var coordinator = CLLocationCoordinate2DMake(la, lo)\n//                pointAnnotation.coordinate = coordinator\n//                pointAnnotation.title = \"测试标注\"\n//                pointAnnotation.subtitle = \"这个标注大头针可以被拖曳！\"\n//                mapView.addAnnotation(pointAnnotation)\n        \n//        \n//        var test = [\"0\",\"1\",\"2\",\"3\",\"4\"]\n        var  servantData = Data\n        let n = Data.count\n        \n        for i = 0 ;i<n;i++  {\n            \n            pointAnnotation = BMKPointAnnotation()\n//            var n = Double(i)*0.1\n//            var coordinator = CLLocationCoordinate2DMake(Double(n)+la, lo)\n            let coordinator = CLLocationCoordinate2DMake(servantData[i].registerLatitude, servantData[i].registerLongitude)\n            pointAnnotation.coordinate = coordinator\n            pointAnnotation.title = servantData[i].servantName\n            pointAnnotation.subtitle = \"星级:\\(servantData[i].servantScore)\"\n            mapView.addAnnotation(pointAnnotation)\n            //mapView.selectAnnotation(pointAnnotation, animated: true)\n            //这样就可以在初始化的时候将 气泡信息弹出\n            let aview = mapView.viewForAnnotation(pointAnnotation)\n            aview.tag = i\n            \n        }\n        \n        \n    }\n//\n////    /// 添加动画标注\n    func addAnimatedAnnotation() {\n        print(\"添加动画标注\")\n        animatedAnnotation = BMKPointAnnotation()\n        let coordinator = CLLocationCoordinate2DMake(la, lo)\n        animatedAnnotation.coordinate = coordinator\n        animatedAnnotation.title = \"动画标注\"\n        animatedAnnotation.subtitle = \"我漂亮不?\"\n        mapView.addAnnotation(animatedAnnotation)\n    }\n    \n    // MARK: - 覆盖物相应协议实现\n    func mapView(mapView: BMKMapView!, viewForOverlay overlay: BMKOverlay!) -> BMKOverlayView! {\n        if (overlay as? BMKCircle) != nil {\n            let circleView = BMKCircleView(overlay: overlay)\n            circleView.fillColor = UIColor.redColor().colorWithAlphaComponent(0.5)\n            circleView.strokeColor = UIColor.blueColor().colorWithAlphaComponent(0.5)\n            circleView.lineWidth = 5\n            \n            return circleView\n        }\n        \n        if (overlay as? BMKPolyline) != nil {\n            let polylineView = BMKPolylineView(overlay: overlay)\n            polylineView.strokeColor = UIColor.blueColor().colorWithAlphaComponent(1)\n            polylineView.lineWidth = 20\n            polylineView.loadStrokeTextureImage(UIImage(named: \"texture_arrow.png\"))\n            \n            return polylineView\n        }\n        \n        if (overlay as? BMKPolygon) != nil {\n            let polygonView = BMKPolygonView(overlay: overlay)\n            polygonView.strokeColor = UIColor.purpleColor().colorWithAlphaComponent(1)\n            polygonView.fillColor = UIColor.cyanColor().colorWithAlphaComponent(0.2)\n            polygonView.lineWidth = 2\n            polygonView.lineDash = (overlay as! BMKPolygon == polygon2)\n            \n            return polygonView\n        }\n        \n        if (overlay as? BMKGroundOverlay) != nil {\n            let groundView = BMKGroundOverlayView(overlay: overlay)\n            \n            return groundView\n        }\n        \n        if (overlay as? BMKArcline) != nil {\n            let arclineView = BMKArclineView(overlay: overlay)\n            arclineView.strokeColor = UIColor.blueColor()\n            arclineView.lineDash = true\n            arclineView.lineWidth = 6\n            \n            return arclineView\n        }\n        return nil\n    }\n//\n//    // MARK: - 覆盖物协议设置\n//    // 根据标注生成对应的视图\n//    func mapView(mapView: BMKMapView!, viewForAnnotation annotation: BMKAnnotation!) -> BMKAnnotationView! {\n//        // 普通标注\n//        if annotation as! BMKPointAnnotation == pointAnnotation {\n//            var AnnotationViewID = \"renameMark\"\n//            annotationView = mapView.dequeueReusableAnnotationViewWithIdentifier(AnnotationViewID) as BMKAnnotationView?\n//            if annotationView == nil {\n//                annotationView = BMKAnnotationView(annotation: annotation, reuseIdentifier: AnnotationViewID)\n//                // 设置颜色\n//                //                annotationView!.pinColor = UInt(BMKPinAnnotationColorPurple)\n//                //                // 从天上掉下的动画\n//                //                annotationView!.animatesDrop = true\n//                //                // 设置可拖曳\n//                //                annotationView!.draggable = true\n//                //设置气泡\n//                popview = UIView(frame: CGRectMake(0, 0, 140, 100))\n//                //设置气泡图片\n//                var image = UIImageView()\n//                image.image = UIImage(named: \"poi_2\")\n//                image.frame = CGRectMake(0, 0, 50, 50);\n//                popview.addSubview(image)\n//                //自定义显示的内容\n//                var test = [\"0\",\"1\",\"2\",\"3\",\"4\"]\n//                var label = UILabel(frame: CGRectMake(50, 0, 90, 60))\n//                label.text = test[i]\n//                label.backgroundColor = UIColor.greenColor()\n//                popview.addSubview(label)\n//                //                annotationView.image =\n//                //                var pView = BMKActionPaopaoView()\n//                //                pView = BMKActionPaopaoView(customView: popview)\n//                //                pView.frame =  CGRectMake(0, 0, 100, 60);\n//                //                annotationView!.paopaoView = nil\n//                //                annotationView!.paopaoView = pView\n//                //                annotationView!.canShowCallout = true\n//                popview.tag = i\n//                println(\"开始转换图片\")\n//                annotationView.image = getImageFromView(popview)\n//                image.tag = i\n//               // println(popview.frame.width)\n//                annotationView.canShowCallout = false\n//                annotationView.tag = i\n//            }\n//            return annotationView\n//        }\n//        \n//        if annotation as! BMKPointAnnotation == animatedAnnotation {\n//            // 动画标注\n//            var AnnotationViewID = \"AnimatedAnnotation\"\n//            var annotationView: AnimatedAnnotationView? = nil\n//            \n//            if annotationView == nil {\n//                annotationView = AnimatedAnnotationView(annotation: annotation, reuseIdentifier: AnnotationViewID)\n//            }\n//             var images = Array(count: 3, repeatedValue: UIImage())\n//            for i in 1...3 {\n//                var image = UIImage(named: \"poi_\\(i).png\")\n//                images[i-1] = image!\n//            }\n//            annotationView?.setImages(images)\n//            return annotationView\n//        }\n//        return nil\n//    }\n    \n    \n    func getImageFromView(view:UIView)->UIImage{\n        print(\"转换图片\")\n        UIGraphicsBeginImageContext(view.bounds.size);\n        print(view.bounds.size)\n        view.layer.renderInContext(UIGraphicsGetCurrentContext())\n        var image1 = UIImage()\n        image1 = UIGraphicsGetImageFromCurrentImageContext();\n        UIGraphicsEndImageContext();\n        return image1\n    }\n    // 当点击annotation view弹出的泡泡时，调用此接口\n    func mapView(mapView: BMKMapView!, annotationViewForBubble view: BMKAnnotationView!) {\n        print(\"点击了泡泡~\")\n          print(view.tag)\n        \n        index = view.tag\n        self.performSegueWithIdentifier(\"MapTo\", sender: self)\n\n        \n        \n    }\n    func mapView(mapView: BMKMapView!, didSelectAnnotationView view: BMKAnnotationView!) {\n        print(\"点击了标注\")\n        let content = view.tag\n        print(\"\\(view.annotation.coordinate.latitude)\")\n        print(\"\\(view.annotation.coordinate.latitude)\")\n        print(\"标注的tag:\\(content)\")\n        //根据经纬度得到该annotation的信息\n        \n    }\n    // 地图初始化完毕的设置\n    func mapViewDidFinishLoading(mapView: BMKMapView!) {\n       // mapView.removeOverlays(mapView.overlays)\n       // mapView.removeAnnotations(mapView.annotations)\n        // 添加内置覆盖物\n       // addOverlayView()\n      // addPointAnnotation()\n       // addAnimatedAnnotation()\n    }\n    \n    // MARK: - 定位协议实现\n    \n    // 在地图将要启动定位时，会调用此函数\n    func willStartLocatingUser() {\n        print(\"启动定位……\")\n    }\n    \n    // 用户位置更新后，会调用此函数\n    func didUpdateBMKUserLocation(userLocation: BMKUserLocation!) {\n        mapView.updateLocationData(userLocation)\n        mapView.centerCoordinate = userLocation.location.coordinate\n        self.userLocation = userLocation\n        print(\"目前位置：\\(userLocation.location.coordinate.latitude), \\(userLocation.location.coordinate.longitude)\")\n        la = userLocation.location.coordinate.latitude\n        lo = userLocation.location.coordinate.longitude\n        print(\"经纬度:\\(la)\")\n         addPointAnnotation()\n         //addAnimatedAnnotation()\n    }\n    \n    // 用户方向更新后，会调用此函数\n    func didUpdateUserHeading(userLocation: BMKUserLocation!) {\n        mapView.updateLocationData(userLocation)\n        print(\"目前朝向:\\(userLocation.heading)\")\n    }\n    \n    // 在地图将要停止定位时，会调用此函数\n    func didStopLocatingUser() {\n        print(\"关闭定位\")\n    }\n    \n    // 定位失败的话，会调用此函数\n    func didFailToLocateUserWithError(error: NSError!) {\n        print(\"定位失败！\")\n        \n    }\n    \n    \n    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {\n        print(\"跳转传递数据\")\n        if segue.identifier==\"MapTo\"{\n                let  object = Data[index]\n                print(\"人员详情\")\n                (segue.destinationViewController as! workerViewController).workerdetail = object\n                print",
 }
]

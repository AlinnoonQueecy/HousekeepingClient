[
 {
  "file": "/Users/zhang/Desktop/HouseKeeping 2/SHW/LocationViewController.swift",
  "offset": 1060,
  "remove": 14492,
  "text": "let width = self.view.frame.width\n        var height = self.view.frame.height\n\n        //实例化导航条\n        navigationBar = UINavigationBar(frame: CGRectMake(0, 0, width, 64))\n        self.view.addSubview(navigationBar!)\n        print(\"创建导航条详情\")\n        onMakeNavitem()\n\n        self.title = \"城市选择\"\n        \n//        let rightItem = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Search, target: self, action: Selector(\"searchCity\"))\n//        self.navigationItem.rightBarButtonItem = rightItem\n        \n        sectionArray = NSArray()\n        cityArray = NSArray()\n        resultArray = NSMutableArray()\n        \n        tableView = UITableView(frame: CGRectMake(0, 64, self.view.frame.size.width, self.view.frame.size.height), style: UITableViewStyle.Plain)\n        //tableView!.separatorStyle =  UITableViewCellSeparatorStyle.None\n        tableView?.delegate = self\n        tableView?.dataSource = self\n        self.view.addSubview(tableView!)\n        \n//        searchBar = UISearchBar(frame:CGRectMake(0, 0, 320, 44))\n//        searchBar!.delegate = self\n//        searchBar!.placeholder = \"关键字\"\n//        searchBar!.hidden = true\n//        self.view.addSubview(searchBar!)\n//        searchController = UISearchController(searchResultsController: self)\n//        searchController.searchBar = searchBar\n//        searchController!.delegate = self\n//        searchController!.searchResultsTableView.delegate = self\n//        searchController!.searchResultsTableView.dataSource = self\n        //单个城市数组\n        sectionArray = CityHandle().shareIndexList()\n        //分组后的城市数组\n        cityArray = CityHandle().shareSectionCityList()\n        self.getUserLocation()\n      \n\n        \n    }\n\n    \n    func searchCity()\n    {\n        \n    \n    \n    }\n    \n    \n    func numberOfSectionsInTableView(tableView: UITableView) -> Int\n    {\n    \n        return sectionArray!.count + 1\n    }\n    \n    \n    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int{\n        if section == 0 {\n            return 1\n        }\n        else\n        {\n            return cityArray!.objectAtIndex(section - 1).count\n        }\n        \n    }\n    \n    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {\n        return 44\n    }\n    \n    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell{\n         let cellIdentifier: String = \"locationCellIdentifier\"\n        \n         if indexPath.section == 0  {\n            let cell = UITableViewCell(style: UITableViewCellStyle.Default, reuseIdentifier: nil)\n            let currentLB = UILabel(frame: CGRectMake(20, 0, 80, cell.bounds.size.height))\n            currentLB.backgroundColor = UIColor.clearColor()\n            currentLB.font = UIFont.systemFontOfSize(14)\n            currentLB.text = \"当前城市:\"\n            cell.contentView.addSubview(currentLB)\n            let cityLB = UILabel(frame: CGRectMake(80, 0, 200, cell.bounds.size.height))\n            cityLB.backgroundColor = UIColor.clearColor()\n            cityLB.textColor = UIColor.orangeColor()\n            cityLB.font = UIFont.systemFontOfSize(16)\n            if currentCity != nil {\n                cityLB.text = currentCity!.cityName as? String\n              }\n             else {\n               cityLB.text = \"正在定位中...\"\n            }\n            cell.contentView.addSubview(cityLB)\n            return cell\n\n        }\n        else\n        {\n           \n            var cell: UITableViewCell? = tableView.dequeueReusableCellWithIdentifier(cellIdentifier) as? UITableViewCell\n            if cell == nil {\n                cell = UITableViewCell(style: UITableViewCellStyle.Default, reuseIdentifier: cellIdentifier)\n            }\n    \n            let model:CityModel = cityArray!.objectAtIndex(indexPath.section - 1).objectAtIndex(indexPath.row) as! CityModel\n\n            cell!.textLabel!.text = model.cityName as? String\n     \n            return cell!\n        }\n    }\n    \n    \n     func sectionIndexTitlesForTableView(tableView: UITableView) -> [String]!\n     {\n       // return CityHandle().shareIndexList() as [AnyObject]\n        return sectionArray! as [AnyObject]\n        \n        }\n    \n   \n    func tableView(tableView: UITableView, titleForHeaderInSection section: Int) -> String?\n    {\n    \n        //return CityHandle().shareIndexList().objectAtIndex(section) as? String\n        if section == 0\n        {\n            return nil\n            \n            }\n        else\n        {\n            return sectionArray!.objectAtIndex(section - 1) as? String\n            }\n    \n        }\n    \n    \n    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {\n        tableView.deselectRowAtIndexPath(indexPath, animated: true)\n       \n        if indexPath.section == 0 {\n        \n           selectedCity = currentCity\n           print(\"selectedCity1:\\(selectedCity)\")\n//            saveNSUerDefaults()\n//           self.performSegueWithIdentifier(\"toLocation\", sender: self)\n            print(\"跳转1\")\n\n        }\n        else\n        {\n           selectedCity = cityArray!.objectAtIndex(indexPath.section - 1).objectAtIndex(indexPath.row) as! CityModel\n \n        }\n        \n        \n        if((delegate) != nil){\n            delegate?.selectCity(self,cityModel:selectedCity)\n            self.navigationController?.popViewControllerAnimated(true)\n        }\n        \n        isCovered = CityHandle().QueryCovered(selectedCity.cityName as  String)\n        if  (isCovered == \"true\") {\n         saveNSUerDefaults()\n         self.performSegueWithIdentifier(\"toLocation\", sender: self)\n          print(\"跳转3\")\n        }else {\n            let alert =  UIAlertView(title: \"暂未开通!\", message: \"\", delegate: self, cancelButtonTitle: \"确定\")\n            alert.show()\n\n        }\n    }\n    \n    \n//pragma mark - 定位\n    func getUserLocation() {\n        if CLLocationManager.locationServicesEnabled() == true {\n            \n            locationManager.delegate = self\n            locationManager.desiredAccuracy = kCLLocationAccuracyHundredMeters //控制定位精度\n            locationManager.distanceFilter = 100 //控制定位服务更新频率。单位是“米”\n//            locationManager!.startUpdatingLocation()\n            //在ios 8.0下要授权\n            locationManager.distanceFilter = kCLLocationAccuracyKilometer\n            if self.locationManager.respondsToSelector(\"requestAlwaysAuthorization\"){\n                locationManager.requestAlwaysAuthorization()\n                print(\"requestAlwaysAuthorization\")\n                \n                \n            }\n            locationManager.startUpdatingLocation()\n            print(\"定位开始1111\")\n\n        }\n    }\n    \n//    func locationManager(manager: CLLocationManager!, didUpdateLocations locations: [AnyObject]!)\n//    {\n//        var currentLocation:CLLocation  = locations[locations.count-1]  as! CLLocation\n//        var geocoder = CLGeocoder()\n//        var p:CLPlacemark?\n//        geocoder.reverseGeocodeLocation(currentLocation , completionHandler: {\n//            (placemarks, error) in\n//            if error != nil {\n//                println(\"reverse geodcode fail: \\(error.localizedDescription)\")\n//                return\n//            }\n//            let pm = placemarks as! [CLPlacemark]\n//            if (pm.count > 0){\n//                p = placemarks[0] as? CLPlacemark\n//                let cityName: NSString = p!.locality\n//                self.getCurrentCityInfoWithCityName(cityName)\n//                self.locationManager.stopUpdatingLocation()\n//                \n//                println(p)\n//            }else{\n//                println(\"No Placemarks!\")\n//            }\n//            \n//        })\n//        \n//    }\n    \n    \n    \n    func  locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        \n        print(\"定位进行中1\")\n        //获取最新坐标\n        var currentLocation:CLLocation  = locations[locations.count-1]  \n        var geocoder = CLGeocoder()\n        var p:CLPlacemark?\n        geocoder.reverseGeocodeLocation(currentLocation , completionHandler: {\n            (placemarks, error) in\n            if error != nil {\n                print(\"reverse geodcode fail: \\(error.localizedDescription)\")\n                return\n            }\n            let pm = placemarks as! [CLPlacemark]\n            if (pm.count > 0){\n                p = placemarks[0] as? CLPlacemark\n                let cityName: NSString = p!.locality\n                self.getCurrentCityInfoWithCityName(cityName)\n                self.locationManager.stopUpdatingLocation()\n                \n//                println(\"P:\\(p)\")\n            }else{\n                print(\"No Placemarks!\")\n            }\n            \n        })\n\n        \n//        if (currLocation.horizontalAccuracy > 0) {\n//            locationManager.stopUpdatingLocation()\n//            println(\"定位结束\")\n//            var longitude = currLocation.coordinate.longitude\n//            var latitude = currLocation.coordinate.latitude\n//      \n//            //longitude = 41.7675003\n//            //latitude = 123.4178237\n//            //上海\n//            //longitude = 31.23065\n//            //latitude = 121.47451\n//            //香港\n//            //longitude = 22.35500\n//            //latitude = 114.14355_10\n//            //澳门\n//            //longitude = 22.18715\n//            //latitude = 113.55137_14\n//            //北京市\n//            //longitude = 40.25622\n//            //latitude = 116.46901\n//            println(longitude)\n//            println(latitude)\n//            \n//            var url = NSURL(string:\"http://gc.ditu.aliyun.com/regeocoding?l=\\(longitude),\\(latitude)&type=100\")\n//            println(url)\n//            // url = NSURL(string:\"http://gc.ditu.aliyun.com/regeocoding?l=41.7675003,123.4178237&type=111\")\n//            var data = NSData(contentsOfURL: url!, options: NSDataReadingOptions.DataReadingUncached, error: nil)\n//            var   str = NSString(data: data! ,encoding: NSUTF8StringEncoding)\n//            println(str)\n//            \n//            var json: AnyObject? = NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments, error: nil)\n//            \n//            var test2: AnyObject?=json!.objectForKey(\"addrList\")\n//            println(test2)\n//            let jsonArray = test2 as? NSArray\n//            println(jsonArray)\n//            // var admName:String=value!.objectForKey(\"admName\") as! String\n//            println(\"你好\")\n//            // println(admName)\n//            var count = jsonArray?.count\n//            var pictureName:String = \"\"\n//            for value in jsonArray!{\n//                \n//                pictureName  =  value.objectForKey(\"admName\") as! String\n//                \n//                \n//                println(pictureName)\n//                //将字符串切割成数组\n//                if pictureName != \"\" {\n//                    range = pictureName.componentsSeparatedByString(\",\")\n//                    println(\"图片字符串长度\\(range.count)\")\n//                    //println(\"第二个图片字符串\\(range[1])\")\n//                    if range[0] as! String == \"上海市\"||range[0] as! String == \"北京市\"||range[0] as! String == \"重庆市\"||range[0] as! String == \"天津市\"||range[0] as! String == \"香港特别行政区\"||range[0] as! String == \"澳门特别行政区\" {\n//                        self.location = self.range[0] as! String\n//                    }else {\n//                        println(location)\n//                        self.location = self.range[1] as! String\n//                    }\n//                }else {\n//                    println(\"我是空的\")\n//                    self.location = \"沈阳市\"\n//                }\n//                saveNSUerDefaults()\n//                label.text = location\n//                \n//            }\n//            \n//        }\n    }\n    \n    func getCurrentCityInfoWithCityName(cityName:NSString ) {\n        print(\"cityname:\\(cityName)\")\n    \n        let cityList = NSArray(array: CityHandle().shareCityList())\n        for var i = 0 ; i < cityList.count; i++  {\n            let model:CityModel = cityList.objectAtIndex(i) as! CityModel\n            if ((cityName as String).rangeOfString((model.cityName as? String)!) != nil)  {\n                    currentCity = model\n                print(\"currentCity:\\(currentCity.cityName)\")\n                    break\n            }else {\n                print(\"没有得到\")\n            }\n        }\n        \n        let indexPath = NSIndexPath(forItem: 0, inSection: 0)\n        tableView!.beginUpdates()\n        tableView!.reloadRowsAtIndexPaths([indexPath] as AnyObject as! [AnyObject], withRowAnimation:UITableViewRowAnimation.Automatic)\n        tableView!.endUpdates()\n        \n     \n    }\n    \n    \n    //导航条详情\n    func reply (){\n        self.dismissViewControllerAnimated(true, completion: nil)\n    }\n    \n    func onMakeNavitem() -> UINavigationItem{\n        print(\"创建导航条step1\")\n        //创建一个导航项\n        let navigationItem = UINavigationItem()\n        //创建左边按钮\n        let leftButton =  UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Reply, target: self, action: \"reply\")\n        //var leftButton =  UIBarButtonItem(title: \"返回\", style: UIBarButtonItemStyle.Bordered, target: self, action: \"reply\")\n        //导航栏的标题\n        navigationItem.title = \"当前城市\"\n        //设置导航栏左边按钮\n        navigationItem.setLeftBarButtonItem(leftButton, animated: true)\n        \n        navigationBar?.pushNavigationItem(navigationItem, animated: true)\n        \n        \n        return navigationItem\n    }\n \n    \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n    \n    \n    //保存数据到NSUerDefaults\n    func saveNSUerDefaults () {\n        //将数据全部存储到NSUerDefaults中\n        let userDefaults:NSUserDefaults = NSUserDefaults.standardUserDefaults()\n        //存储时，除了NSNumber类型使用对应的类型外，其他的都使用setObject:forKey:\n        userDefaults.setObject( selectedCity.cityName, forKey: \"location\")\n        print",
 }
]

[
 {
  "file": "/Users/zhang/Desktop/HouseKeeping 2/SHW/LoginVC.swift",
  "offset": 1258,
  "remove": 5936,
  "text": "(\"创建导航条详情\")\n        onMakeNavitem()\n        \n        loginPassword.delegate  = self\n        customerID.delegate = self\n        //输入框中一开始就有的文字\n        loginPassword.placeholder = \"请输入密码\"\n        customerID.placeholder = \"请输入用户名\"\n        //输入框中是否有个叉号，在什么时候显示，用于一次性删除输入框中的内容\n        //        customerID.clearButtonMode =       UITextFieldViewMode.UnlessEditing\n        loginPassword.clearButtonMode = UITextFieldViewMode.Always//一直出现\n        //再次编辑就清空\n        loginPassword.clearsOnBeginEditing = true\n        //每输入一个字符就变成点 用语密码输入\n        loginPassword.secureTextEntry = true\n        \n    }\n    \n    \n    //导航条详情\n    func reply (){\n        self.dismissViewControllerAnimated(true, completion: nil)\n    }\n    \n    func onMakeNavitem() -> UINavigationItem{\n        print(\"创建导航条step1\")\n        //创建一个导航项\n        let navigationItem = UINavigationItem()\n        //创建左边按钮\n        let leftButton =  UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Reply, target: self, action: \"reply\")\n        //var leftButton =  UIBarButtonItem(title: \"返回\", style: UIBarButtonItemStyle.Bordered, target: self, action: \"reply\")\n        //导航栏的标题\n        navigationItem.title = \"登录\"\n        //设置导航栏左边按钮\n        navigationItem.setLeftBarButtonItem(leftButton, animated: true)\n        navigationBar?.pushNavigationItem(navigationItem, animated: true)\n        return navigationItem\n    }\n\n    @IBAction func Login(sender: AnyObject) {\n        customerid = customerID.text\n        loginPwd = loginPassword.text\n        if customerID.text == \"\"{\n            let alert = UIAlertView()\n            alert.title = \"\"\n            alert.message = \"请输入用户账号\"\n            alert.addButtonWithTitle(\"确定\")\n            alert.show()\n        }else if loginPassword.text == \"\"{\n            let alert = UIAlertView()\n            alert.title = \"\"\n            alert.message = \"请输入登录密码\"\n            alert.addButtonWithTitle(\"确定\")\n            alert.show()\n            \n        }else {\n        let url: NSURL! = NSURL(string:HttpData.http+\"/NationalService/MobileCustomerInfoAction?operation=_login\")\n         \n        \n        let request:NSMutableURLRequest = NSMutableURLRequest(URL: url, cachePolicy:NSURLRequestCachePolicy.UseProtocolCachePolicy,timeoutInterval: 10)\n        \n        request.HTTPMethod = \"POST\"\n        \n        let param:String = \"{\\\"customerID\\\":\\\"\\(customerID.text)\\\",\\\"loginPassword\\\":\\\"\\(loginPassword.text)\\\"}\"\n            print(\"param\")\n            print(param)\n    \n        let data:NSData = param.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: true)!\n        request.HTTPBody = data;\n        var response:NSURLResponse?\n        var error:NSError?\n        var receiveData:NSData?\n        do {\n            receiveData = try NSURLConnection.sendSynchronousRequest(request, returningResponse: &response)\n        } catch let error1 as NSError {\n            error = error1\n            receiveData = nil\n        }\n        if (error != nil)\n        {\n            print(error?.code)\n            print(error?.description)\n        }\n        else\n        {\n            let jsonString = NSString(data:receiveData!, encoding: NSUTF8StringEncoding)\n            print(jsonString)\n            \n        }\n        \n        let dict:AnyObject? = try? NSJSONSerialization.JSONObjectWithData(receiveData!, options: NSJSONReadingOptions.AllowFragments)\n        let dic = dict as! NSDictionary\n        \n        let serverResponse = dic.objectForKey(\"serverResponse\") as? String\n         //customername = (dic.objectForKey(\"customerName\") as? String)!\n//          println(\"customerName:\\(customername)\")\n//            println(customername)\n            print(\"LOginserverResponse:\\(serverResponse)\")\n            \n             if serverResponse == \"Success\"{\n              saveNSUerDefaults ()\n             self.dismissViewControllerAnimated(true, completion: nil)\n           }else if serverResponse == \"Failed\"{\n            \n            let alert =  UIAlertView(title: \"登录失败\", message: \"请输入正确的用户名和密码\", delegate: self, cancelButtonTitle: \"确定\")\n            alert.show()\n        }\n      }\n    }\n    //保存数据到NSUerDefaults\n    func saveNSUerDefaults () {\n        //将数据全部存储到NSUerDefaults中\n        let userDefaults:NSUserDefaults = NSUserDefaults.standardUserDefaults()\n        //存储时，除了NSNumber类型使用对应的类型外，其他的都使用setObject:forKey:\n        print(\"保存本地\")\n        print( customerID.text )\n        userDefaults.setObject( customerID.text , forKey: \"customerID\")\n        userDefaults.setObject( loginPassword.text , forKey: \"loginPassword\")\n      \n        \n        //建议同步到磁盘，但不是必须得\n        userDefaults.synchronize()\n    }\n    //从NSUerDefaults 中读取数据\n    func readNSUerDefaults () {\n        \n        let userDefaultes = NSUserDefaults.standardUserDefaults()\n        if  (userDefaultes.stringForKey(\"customerID\")) != nil && (userDefaultes.stringForKey(\"loginPassword\")) != nil{\n            customerid = userDefaultes.stringForKey(\"customerID\")!\n            loginPwd = userDefaultes.stringForKey(\"loginPassword\")!\n              \n        }\n        \n    }\n\n    override func  viewDidLayoutSubviews() {\n        let width  = self.view.frame.width\n        var height = self.view.frame.height\n        \n        //name.frame = CGRectMake(9, 105, 60, 30)\n        customerID.frame = CGRectMake(30, 105, width-50, 30)\n        //mima.frame = CGRectMake(9, 168, 60, 30)\n        loginPassword.frame = CGRectMake(30, 168, width-50, 30)\n        register.frame = CGRectMake(9, 340, 60, 30)\n        getmima.frame = CGRectMake(width-80, 340, 60, 30)\n        \n        \n    }\n   \n    @IBAction func touchView(sender: AnyObject) {\n        print",
 }
]

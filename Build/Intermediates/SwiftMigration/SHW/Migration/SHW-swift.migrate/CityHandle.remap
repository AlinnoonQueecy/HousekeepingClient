[
 {
  "file": "/Users/zhang/Desktop/HouseKeeping 2/SHW/CityHandle.swift",
  "offset": 1838,
  "remove": 7825,
  "text": "(try! NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.MutableLeaves)) as! NSArray\n        \n    return provinceList\n    }\n    \n    //2.得到城市\n    func getCityList  () -> NSArray {\n        //1.得到省\n        let provinceList:NSArray = self.shareProvinceList()\n        let cityList:NSMutableArray = NSMutableArray()\n        for var i = 0; i < provinceList.count; i++ {\n            let provinceDict:NSDictionary = provinceList.objectAtIndex(i) as! NSDictionary\n            let cityForProvince: NSArray = provinceDict.objectForKey(\"cities\") as! NSArray\n            for var j = 0; j < cityForProvince.count; j++ {\n                let cityDict:NSDictionary  = cityForProvince.objectAtIndex(j) as! NSDictionary\n                let city:CityModel  = CityModel()\n                city.cityID =  cityDict.objectForKey(\"id\") as? NSString\n                city.cityName = cityDict.objectForKey(\"name\") as? NSString\n                city.parentID = cityDict.objectForKey(\"parentId\") as? NSString\n                city.cityPinYin = cityDict.objectForKey(\"pinyin\") as? NSString\n                cityList.addObject(city)\n            }\n        }\n        return cityList\n    }\n    \n    \n    \n   func getCityNameWithCityID(cityID:NSString ) -> NSString {\n    \n        var cityName: NSString?\n        let cityList:NSArray  = self.shareCityList()\n        var city:CityModel?\n        for  city in cityList  {\n            if  city.cityID!!.isEqualToString(cityID as String) {\n                cityName = city.cityName\n                break\n                }\n            }\n            return cityName!\n        }\n    \n   \n    \n    \n    func getProvinceIndexWithCityID(cityID:NSString ) -> NSInteger {\n        var cityModel:CityModel?\n        let cityList: NSArray = self.shareCityList()\n        var city:CityModel?\n        for city in cityList  {\n            if city.cityID!!.isEqualToString(cityID as String) {\n                cityModel = city as? CityModel\n                break\n            }\n        }\n        var index:NSInteger = 0\n        for var i = 0; i < self.shareProvinceList().count; i++ {\n            let provinceDict:NSDictionary = self.shareProvinceList().objectAtIndex(i) as! NSDictionary\n            let parentID: NSString = provinceDict.objectForKey(\"id\") as! NSString\n            if parentID.isEqualToString(cityModel!.parentID as String) {\n                index = i\n                break\n                }\n            }\n        return  index\n      \n        }\n    \n    \n    \n    \n    func getCityIndexWithCityID(cityID:NSString ) -> NSInteger {\n        \n        let provinceIndex: NSInteger = self.getProvinceIndexWithCityID(cityID) as NSInteger\n        \n        let provinceDict: NSDictionary = self.shareProvinceList().objectAtIndex(provinceIndex) as! NSDictionary\n        let cityForProvince:NSArray = provinceDict.objectForKey(\"cities\") as! NSArray\n        var index = 0\n        for var i = 0; i < cityForProvince.count ; i++ {\n            let cityDict:NSDictionary = cityForProvince.objectAtIndex(i) as! NSDictionary\n            let city_ID:NSString = cityDict.objectForKey(\"id\") as! NSString\n            if city_ID.isEqualToString(cityID as String) {\n                index = i\n                break\n            }\n        }\n        return index\n    }\n    \n    \n    \n    //按拼音城市排序\n    func sortCityList() -> NSArray{\n        let cityList:NSArray = self.shareCityList()\n        let sort:NSSortDescriptor = NSSortDescriptor(key:\"cityPinYin\", ascending: true)\n        let arr = NSArray().arrayByAddingObject(sort)\n        return cityList.sortedArrayUsingDescriptors(arr as AnyObject as! [AnyObject])\n      \n    }\n    \n    \n    func tableViewIndex() -> NSArray{\n        //给城市按拼音排序\n        let sortArry:NSArray = self.sortCityList()\n        let resultArray: NSMutableArray = NSMutableArray()\n        var indexString:NSString = \"\"\n    //#栏\n        var otherIndex = false\n        var city:CityModel?\n        for city in sortArry {\n            if city.cityPinYin!!.length < 1 {\n                otherIndex = true\n            }\n            else {\n                let firstCharacter:NSString = city.cityPinYin!!.substringToIndex(1).uppercaseString\n                //若第一个字符为非A-Z\n               // let firstChar: Character = firstCharacter.characterAtIndex(0) as! Character\n                let firstChar: Character = Character( firstCharacter as String)\n\n                if ((firstChar >= \"A\" && firstChar <= \"Z\") == false) {\n                    otherIndex = true\n                }\n                else {\n                    if (indexString.isEqualToString(firstCharacter as String)) == false {\n                        resultArray.addObject(firstCharacter)\n                        indexString = firstCharacter\n                    }\n                }\n    \n            }\n        }\n        if otherIndex == true {\n            resultArray.addObject(\"#\")\n        }\n        return resultArray\n    }\n\n    \n  //按拼音给城市分组\n  func dataForSection () -> NSArray{\n    //\n    let sortArray:NSArray = self.sortCityList()\n    let resultArray: NSMutableArray = NSMutableArray()\n    var sectionArray: NSMutableArray = NSMutableArray()\n    var indexString:NSString = \"\"\n    //#栏\n    let otherArray:NSMutableArray = NSMutableArray()\n    var city:CityModel?\n    for  city in sortArray {\n        if city.cityPinYin!!.length < 1 {\n            otherArray.addObject(city)\n        }\n        else {\n          let firstCharacter:NSString  = city.cityPinYin!!.substringToIndex(1).uppercaseString as NSString\n            //若第一个字符为非A-Z\n           // let firstChar: Character = (firstCharacter.characterAtIndex(0) as? Character)!\n            let firstChar: Character = Character(firstCharacter as String)\n            if ((firstChar >= \"A\" && firstChar <= \"Z\") == false) {\n                otherArray.addObject(city)\n            }\n            else {\n                //A-Z\n                if indexString.isEqualToString(firstCharacter as String) == false {\n                    sectionArray = NSMutableArray()\n                    sectionArray.addObject(city)\n                    resultArray.addObject(sectionArray)\n                    indexString = firstCharacter\n                }\n                else {\n                    sectionArray.addObject(city)\n                }\n            }\n            \n        }\n    }\n    resultArray.addObject(otherArray)\n    return resultArray\n   }\n    \n    //是否被覆盖\n    func QueryCovered (cityName:String)->String{\n        let url: NSURL! = NSURL(string: HttpData.http+\"/NationalService/MobileCityInfoAction?operation=_queryisCovered\")\n        let request:NSMutableURLRequest = NSMutableURLRequest(URL:url, cachePolicy:NSURLRequestCachePolicy.UseProtocolCachePolicy,timeoutInterval: 10)\n        \n        request.HTTPMethod = \"POST\"\n        //var param:String = \"{\\\"customerAccount\\\":\\\"Alex\\\",\\\"Password\\\":\\\"a123\\\"}\"\n        let param:String = \"{\\\"cityName\\\":\\\"\\(cityName)\\\"}\"\n        let data:NSData = param.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: true)!\n        request.HTTPBody = data;\n        var response:NSURLResponse?\n        var error:NSError?\n        var receiveData:NSData?\n        do {\n            receiveData = try NSURLConnection.sendSynchronousRequest(request, returningResponse: &response)\n        } catch let error1 as NSError {\n            error = error1\n            receiveData = nil\n        }\n        if (error != nil)\n        {\n            print(error?.code)\n            print(error?.description)\n        }\n        else\n        {\n            let jsonString = NSString(data:receiveData!, encoding: NSUTF8StringEncoding)\n            print(jsonString)\n            \n        }\n        \n        let json:AnyObject! = try? NSJSONSerialization.JSONObjectWithData(receiveData!, options: NSJSONReadingOptions.AllowFragments)\n        let Covered: AnyObject?=json.objectForKey(\"isCovered\")\n        \n        let",
 }
]

[
 {
  "file": "/Users/zhang/Desktop/HouseKeeping 2/SHW/reserveTableViewController.swift",
  "offset": 1180,
  "remove": 9019,
  "text": "(\"创建导航条详情\")\n        onMakeNavitem()\n        \n        DeclaresData = QueryDeclareData(customerid,isAccepted: isAccepted) as! [DeclaresInfo]\n        reserve.dataSource = self\n        reserve.delegate = self\n      \n \n        \n        //初始下拉刷新控件\n        //        self.refreshControl = UIRefreshControl()\n        refreshControl.attributedTitle = NSAttributedString(string: \"松开后自动刷新\")\n        refreshControl.tintColor = UIColor.grayColor()\n        refreshControl.addTarget(self, action: \"refresh\", forControlEvents: UIControlEvents.ValueChanged)\n        reserve.addSubview(refreshControl)\n        \n        //分段选择设置\n        let arr = NSArray(objects: \"未接受\",\"已拒绝\")\n        var sw = (self.view.frame.width-10)/4\n        //设置item\n        segmentedControl = UISegmentedControl(items: arr as [AnyObject])\n        //设置位置\n        segmentedControl.frame =  CGRectMake(5, 64,self.view.frame.width-10, 36)\n        //设置Item的宽度\n        //            segmentedControl.setWidth(sw, forSegmentAtIndex: 0)\n        //            segmentedControl.setWidth(sw, forSegmentAtIndex: 1)\n        //            segmentedControl.setWidth(sw, forSegmentAtIndex: 2)\n        //            segmentedControl.setWidth(sw, forSegmentAtIndex: 3)\n        //每个的宽度按segment的宽度平分\n        segmentedControl.apportionsSegmentWidthsByContent =  true\n        \n        //选中第几个segment 一般用于初始化时选中\n        segmentedControl.selectedSegmentIndex = 0\n        //风格\n        self.view.addSubview(segmentedControl)//添加到父视图\n        //添加事件\n        print(\"点击\")\n        segmentedControl.addTarget(self, action: \"selected\", forControlEvents: UIControlEvents.ValueChanged)\n        \n        \n\n    }\n    override func viewDidLayoutSubviews() {\n        reserve.frame = CGRectMake(0, 100, self.view.frame.width, self.view.frame.height)\n    }\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n\n    // MARK: - Table view data source\n\n    func numberOfSectionsInTableView(tableView: UITableView) -> Int {\n        // #warning Potentially incomplete method implementation.\n        // Return the number of sections.\n        return 1;\n    }\n\n     func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        // #warning Incomplete method implementation.\n        // Return the number of rows in the section.\n        return DeclaresData.count;\n    }\n\n    \n     func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCellWithIdentifier(\"reservecell\", forIndexPath: indexPath) as! reserveTableViewCell\n\n        // Configure the cell...\n//      let reservecell = ReserveData[indexPath.row] as Finishinfo\n        let reservecell = DeclaresData[indexPath.row] as DeclaresInfo\n\n        cell.orderNo.text = \"服务项目:\\(reservecell.serviceType)\"\n        cell.orderTime.text = \"服务时间:\\(reservecell.serviceTime)\"\n        cell.servantName.text = \"薪水:\\(reservecell.salary)元\"\n        cell.cancel.addTarget(self, action: \"cancel:\", forControlEvents: UIControlEvents.TouchUpInside)\n        cell.cancel.tag = indexPath.row\n        if reservecell.isAccepted == 0{\n            cell.cancel.hidden = false\n            cell.cancel.enabled = true\n            cell.serviceType.text = \"状态:未接受\"\n            cell.serviceType.textColor = UIColor.orangeColor()\n        }else {\n            cell.cancel.hidden = true\n            cell.cancel.enabled = false\n            cell.serviceType.text = \"状态:已拒绝\"\n            cell.serviceType.textColor = UIColor.grayColor()\n        }\n        \n        return cell\n    }\n    \n    \n    func cancel(cancel:UIButton){\n        \n        let  response = deleteDeclare(DeclaresData[cancel.tag].id)\n        \n        if response == \"Success\" {\n            DeclaresData.removeAtIndex(cancel.tag)\n            //self.reserve.deleteRowsAtIndexPaths([indexPath], withRowAnimation:UITableViewRowAnimation.Left)\n            self.reserve.reloadData()\n             print(\"刷新好了\")\n        }else {\n            let alert =  UIAlertView(title: \"取消失败\", message: \"请重试\", delegate: self, cancelButtonTitle: \"确定\")\n            alert.show()\n        }\n        \n    }\n    \n    // 滑动删除必须实现的方法\n    \n    //Override to support editing the table view.\n//    func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath) {\n//        if editingStyle == .Delete {\n//            //Delete the row from the data source\n//            println(\"删除\\(indexPath.row)\")\n//            \n//            \n//            var  response = deleteDeclare(DeclaresData[indexPath.row].id)\n//            \n//            if response == \"Success\" {\n//                DeclaresData.removeAtIndex(indexPath.row)\n//                self.reserve.deleteRowsAtIndexPaths([indexPath], withRowAnimation:UITableViewRowAnimation.Left)\n//            }else {\n//                let alert =  UIAlertView(title: \"取消失败\", message: \"请重试\", delegate: self, cancelButtonTitle: \"确定\")\n//                alert.show()\n//            }\n//            \n//            println(\"删\\(indexPath.row)\")\n//            \n//        } else if editingStyle == .Insert {\n//            //Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view\n//        }\n//    }\n//    \n//    //滑动删除\n//    func tableView(tableView: UITableView, editingStyleForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCellEditingStyle {\n//        return UITableViewCellEditingStyle.Delete\n//    }\n//    //修改删除按钮的文字\n//    func  tableView(tableView: UITableView, titleForDeleteConfirmationButtonForRowAtIndexPath indexPath: NSIndexPath) -> String! {\n//        return \"取消发布\"\n//    }\n//    \n\n    //分段选择器的函数\n    func selected() {\n        print(\"点击开始\")\n        //读取控件\n        let x = segmentedControl.selectedSegmentIndex\n        switch(x){\n        case 0:\n               isAccepted = 0\n             DeclaresData = QueryDeclareData(customerid,isAccepted: isAccepted) as! [DeclaresInfo]\n            print(\"点击第一个\")\n            self.reserve.reloadData()\n            \n            break\n          default:\n             isAccepted = 2\n           DeclaresData = QueryDeclareData(customerid,isAccepted: isAccepted) as! [DeclaresInfo]\n            print(\"点击第2个\")\n            self.reserve.reloadData()\n            break\n            \n       \n        }\n        \n        \n    }\n\n    //导航条详情\n    func reply (){\n        self.dismissViewControllerAnimated(true, completion: nil)\n    }\n    \n    func onMakeNavitem() -> UINavigationItem{\n        print(\"创建导航条step1\")\n        //创建一个导航项\n        let navigationItem = UINavigationItem()\n        //创建左边按钮\n        let leftButton =  UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Reply, target: self, action: \"reply\")\n        //var leftButton =  UIBarButtonItem(title: \"返回\", style: UIBarButtonItemStyle.Bordered, target: self, action: \"reply\")\n        //导航栏的标题\n        navigationItem.title = \"发布列表\"\n        //设置导航栏左边按钮\n        navigationItem.setLeftBarButtonItem(leftButton, animated: true)\n        navigationBar.pushNavigationItem(navigationItem, animated: true)\n        \n        \n        return navigationItem\n    }\n    \n    \n    // 下拉刷新方法\n    func refresh() {\n        //if self.refreshControl.refreshing == true {\n        \n        self.refreshControl.attributedTitle = NSAttributedString(string: \"Loading...\")\n         DeclaresData = QueryDeclareData(customerid,isAccepted: isAccepted) as! [DeclaresInfo]\n        self.reserve.reloadData()\n        self.refreshControl.endRefreshing()\n        print(\"刷新好了\")\n        //}\n        //self.automaticallyAdjustsScrollViewInsets = false\n    }\n\n    \n    //从NSUerDefaults 中读取数据\n    func readNSUerDefaults () {\n        \n        let userDefaultes = NSUserDefaults.standardUserDefaults()\n        if  (userDefaultes.stringForKey(\"customerID\")) != nil && (userDefaultes.stringForKey(\"loginPassword\")) != nil{\n            customerid = userDefaultes.stringForKey(\"customerID\")!\n            loginPassword = userDefaultes.stringForKey(\"loginPassword\")!\n            \n        }\n        \n    }\n\n    \n\n    // MARK: - Navigation\n\n    // In a storyboard-based application, you will often want to do a little preparation before navigation\n    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {\n        \n        if segue.identifier==\"reservedetail\"{\n            if let indexPath = self.reserve.indexPathForSelectedRow{\n                \n               let object = DeclaresData[indexPath.row] as DeclaresInfo\n                print",
 }
]

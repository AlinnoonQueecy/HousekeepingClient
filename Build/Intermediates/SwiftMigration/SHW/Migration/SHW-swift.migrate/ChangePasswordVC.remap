[
 {
  "file": "/Users/zhang/Desktop/HouseKeeping 2/SHW/ChangePasswordVC.swift",
  "offset": 1114,
  "remove": 9657,
  "text": "(\"创建导航条详情\")\n        onMakeNavitem()\n        // Do any additional setup after loading the view.\n        var Register = [\"原密码:\",\"新密码:\",\"确认密码:\"]\n        var image = [ \"mima\",\"mima\",\"mima\"]\n\n        let terms = Register.count as Int\n        for var i = 0;i < terms;i++ {\n      \n        let  image1 = UIImageView(frame:CGRectMake(CGFloat(15), CGFloat(76+i*60), CGFloat(34), CGFloat(34)))\n            image1.image = UIImage(named:image[i])\n        let label1 = UILabel(frame: CGRectMake((CGFloat(52), CGFloat(76+i*60),CGFloat(90), CGFloat(34))))\n            label1.text = Register[i]\n            self.view.addSubview(image1)\n            self.view.addSubview(label1)\n        }\n        let pageWidth = self.view.frame.width\n        button = UIButton(frame: CGRectMake(pageWidth/2-125, CGFloat(100+terms*60), 250, 30))\n        button.setTitle(\"修改并保存\", forState: UIControlState.Normal)\n        button.backgroundColor = UIColor.orangeColor()\n        button.titleLabel?.font = UIFont.systemFontOfSize(14)\n        button.showsTouchWhenHighlighted = true\n        button.layer.cornerRadius = 5\n//        button.addTarget(self , action: Selector(\"tapped\"), forControlEvents: UIControlEvents.TouchUpInside)  \n        self.view.addSubview(button)\n        \n        let customY = 76\n        //textField\n         Originalpassword = UITextField(frame: CGRectMake((CGFloat(145), CGFloat(customY),CGFloat(pageWidth-150), CGFloat(34))))\n        Originalpassword.borderStyle = UITextBorderStyle.RoundedRect\n      \n        Originalpassword.minimumFontSize=14\n        Originalpassword.becomeFirstResponder()\n        Originalpassword.delegate = self //设置代理\n        Originalpassword.clearButtonMode=UITextFieldViewMode.Always  //一直出现清除按钮\n        Originalpassword.returnKeyType = UIReturnKeyType.Go //表示完成输入，同时会跳到另一页\n        //scrollView.addSubview(customerID)\n         Originalpassword.secureTextEntry = true\n        self.view.addSubview(Originalpassword)\n        label1 = UILabel(frame: CGRectMake((CGFloat(145), CGFloat(customY+37),CGFloat(pageWidth-150), CGFloat(20))))\n        label1.font = UIFont.systemFontOfSize(13)\n        label1.textColor = UIColor.redColor()\n        self.view.addSubview(label1)\n        Newpassword = UITextField(frame: CGRectMake((CGFloat(145), CGFloat(customY+1*60),CGFloat(pageWidth-150), CGFloat(34))))\n        Newpassword.borderStyle = UITextBorderStyle.RoundedRect\n        Newpassword.minimumFontSize=14\n        Newpassword.becomeFirstResponder()\n        Newpassword.delegate = self //设置代理\n        Newpassword.clearButtonMode=UITextFieldViewMode.Always  //一直出现清除按钮\n        Newpassword.returnKeyType = UIReturnKeyType.Go //表示完成输入，同时会跳到另一页\n        //scrollView.addSubview(customerName)\n        Newpassword.secureTextEntry = true\n\n        self.view.addSubview(Newpassword)\n        label2 = UILabel(frame: CGRectMake((CGFloat(145), CGFloat(customY+97),CGFloat(pageWidth-150), CGFloat(20))))\n        label2.font = UIFont.systemFontOfSize(13)\n        label2.textColor = UIColor.redColor()\n        self.view.addSubview(label2)\n        Confirmpassword = UITextField(frame: CGRectMake((CGFloat(145), CGFloat(customY+2*60),CGFloat(pageWidth-150), CGFloat(34))))\n        Confirmpassword.borderStyle = UITextBorderStyle.RoundedRect\n        Confirmpassword.minimumFontSize=14\n        Confirmpassword.becomeFirstResponder()\n        Confirmpassword.delegate = self //设置代理\n        Confirmpassword.clearButtonMode=UITextFieldViewMode.Always  //一直出现清除按钮\n        Confirmpassword.returnKeyType = UIReturnKeyType.Go //表示完成输入，同时会跳到另一页\n        //scrollView.addSubview(customerName)\n        Confirmpassword.secureTextEntry = true\n\n        self.view.addSubview(Confirmpassword)\n        label3 = UILabel(frame: CGRectMake((CGFloat(145), CGFloat(customY+157),CGFloat(pageWidth-150), CGFloat(20))))\n        label3.font = UIFont.systemFontOfSize(13)\n        label3.textColor = UIColor.redColor()\n        self.view.addSubview(label3)\n        //文本框编辑结束时，触发\n        NSNotificationCenter.defaultCenter().addObserver(self, selector: \"textDidEndEditing\", name: UITextFieldTextDidEndEditingNotification, object: nil)\n        //文本框内容改变时，触发\n        NSNotificationCenter.defaultCenter().addObserver(self, selector: \"textDidChange\", name: UITextFieldTextDidChangeNotification, object: nil)\n        \n\n\n    }\n    //保存函数\n    func tapped(){\n        \n//        serverResponse = ChangePassword(id, OriginalP, NewP) as  String\n//        println(\"serverResponse是\"+serverResponse!)\n        let url: NSURL! = NSURL(string: HttpData.http+\"/NationalService/MobileCustomerInfoAction?operation=_modifyPWD\")\n        \n        let request:NSMutableURLRequest = NSMutableURLRequest(URL:url, cachePolicy:NSURLRequestCachePolicy.UseProtocolCachePolicy,timeoutInterval: 10)\n        \n        request.HTTPMethod = \"POST\"\n        \n        let param:String = \"{\\\"id\\\":\\\"\\(id)\\\",\\\"oldpwd\\\":\\\"\\(OriginalP)\\\",\\\"newpwd\\\":\\\"\\(NewP)\\\"}\"\n        print(\"param\")\n         print(param)\n        let data:NSData = param.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: true)!\n        request.HTTPBody = data;\n        var response:NSURLResponse?\n        var error:NSError?\n        var receiveData:NSData?\n        do {\n            receiveData = try NSURLConnection.sendSynchronousRequest(request, returningResponse: &response)\n        } catch let error1 as NSError {\n            error = error1\n            receiveData = nil\n        }\n        if (error != nil)\n        {\n            print(error?.code)\n            print(error?.description)\n        }\n        else\n        {\n            let jsonString = NSString(data:receiveData!, encoding: NSUTF8StringEncoding)\n            print(\"jsonString\")\n            print(jsonString)\n            \n        }\n\n        let dict:AnyObject? = try? NSJSONSerialization.JSONObjectWithData(receiveData!, options: NSJSONReadingOptions.AllowFragments)\n        let dic = dict as! NSDictionary\n        let serverResponse = dic.objectForKey(\"serverResponse\") as? String\n        if serverResponse == \"Success\"{\n            //self.performSegueWithIdentifier(\"LoginTo\", sender: self)\n            let alert =  UIAlertView(title: \"修改成功\", message: \"\", delegate: self, cancelButtonTitle: \"确定\")\n            alert.show()\n            saveNSUerDefaults ()\n            \n        }\n        \n        if serverResponse == \"Failed\"{\n            \n            let alert =  UIAlertView(title: \"修改失败\", message: \"请重新输入\", delegate: self, cancelButtonTitle: \"确定\")\n            alert.show()\n        }\n        \n\n    }\n    //编辑结束时启动\n    func textFieldDidEndEditing(Confirmpassword: UITextField) {\n        print(\"你好啊啊啊啊啊\")\n        \n     \n    \n        }\n    //通知事件\n\n        func textDidEndEditing(){\n         OriginalP = Originalpassword.text\n         NewP = Newpassword.text\n//         ConfirmP = Confirmpassword.text\n         print( OriginalP)\n        print(Password)\n        if OriginalP != Password {\n            print(Password)\n            label1.text = \"原密码不正确！\"\n        }else {\n            label1.text = \"\"\n//            if NewP!.lengthOfBytesUsingEncoding(NSUTF8StringEncoding) != 6{\n//                 label2.text = \"请输入六位密码！\"\n//            }else if NewP == OriginalP{\n//                label2.text = \"和原密码相同！\"\n//        \n//           }else {\n//                label2.text = \"\"\n//                if NewP != ConfirmP {\n//                    label3.text = \"密码不一致\"\n//                }else{\n//                    button.addTarget(self , action: Selector(\"tapped\"), forControlEvents: UIControlEvents.TouchUpInside)\n//                    \n//                }\n        //    }\n        }\n     \n      }\n    func textDidChange(){\n        NewP = Newpassword.text\n        ConfirmP = Confirmpassword.text\n        if NewP.lengthOfBytesUsingEncoding(NSUTF8StringEncoding) != 6{\n            label2.text = \"请输入六位密码！\"\n        }else if NewP == OriginalP{\n            label2.text = \"和原密码相同！\"\n        \n        }else {\n            label2.text = \"\"\n            if NewP != ConfirmP {\n                label3.text = \"密码不一致\"\n            }else{\n                label3.text = \"\"\n                button.addTarget(self , action: Selector(\"tapped\"), forControlEvents: UIControlEvents.TouchUpInside)\n                            \n            }\n        }\n \n    }\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n    //导航条详情\n    func reply (){\n        self.dismissViewControllerAnimated(true, completion: nil)\n    }\n    \n    func onMakeNavitem() -> UINavigationItem{\n        print(\"创建导航条step1\")\n        //创建一个导航项\n        let navigationItem = UINavigationItem()\n        //创建左边按钮\n        let leftButton =  UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Reply, target: self, action: \"reply\")\n        //var leftButton =  UIBarButtonItem(title: \"返回\", style: UIBarButtonItemStyle.Bordered, target: self, action: \"reply\")\n        //导航栏的标题\n        navigationItem.title = \"修改密码\"\n        //设置导航栏左边按钮\n        navigationItem.setLeftBarButtonItem(leftButton, animated: true)\n        \n        navigationBar?.pushNavigationItem(navigationItem, animated: true)\n        \n        \n        return navigationItem\n    }\n    //保存数据到NSUerDefaults\n    func saveNSUerDefaults () {\n        //将数据全部存储到NSUerDefaults中\n        let",
 }
]

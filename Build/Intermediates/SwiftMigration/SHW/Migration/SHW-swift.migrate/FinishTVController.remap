[
 {
  "file": "/Users/zhang/Desktop/HouseKeeping 2/SHW/FinishTVController.swift",
  "offset": 812,
  "remove": 13691,
  "text": "let userDefaultes = NSUserDefaults.standardUserDefaults()\n        if  (userDefaultes.stringForKey(\"customerID\")) != nil && (userDefaultes.stringForKey(\"loginPassword\")) != nil{\n            customerid = userDefaultes.stringForKey(\"customerID\")!\n            loginPassword = userDefaultes.stringForKey(\"loginPassword\")!\n            \n        }\n        \n    }\n        override func viewDidLoad() {\n        super.viewDidLoad()\n        //读取用户信息，如果不是第一次登录，则会自动登录\n        readNSUerDefaults()\n        //setRightDeleteButtonItem()\n        //FinishDatas = refreshFinish(customerid) as! [Finishinfo]\n        FinishDatas = refreshOrderData(customerid,orderStatus: orderStatus) as! [Finishinfo]\n \n         \n        yuding.dataSource = self\n        yuding.delegate = self\n        \n       //初始下拉刷新控件\n//        self.refreshControl = UIRefreshControl()\n        refreshControl.attributedTitle = NSAttributedString(string: \"松开后自动刷新\")\n        refreshControl.tintColor = UIColor.grayColor()\n        refreshControl.addTarget(self, action: \"refresh\", forControlEvents: UIControlEvents.ValueChanged)\n         yuding.addSubview(refreshControl)\n        print(\"要刷新喽\")\n            //实例化导航条\n            navigationBar = UINavigationBar(frame: CGRectMake(0, 0, self.view.frame.width, 64))\n            self.view.addSubview(navigationBar!)\n        \n            onMakeNavitem()\n            \n            //分段选择设置\n            let arr = NSArray(objects: \"全部\",\"待付款\",\"服务中\",\"服务完成\")\n           var sw = (self.view.frame.width-10)/4\n            //设置item\n            segmentedControl = UISegmentedControl(items: arr as [AnyObject])\n            //设置位置\n              segmentedControl.frame =  CGRectMake(5, 64,self.view.frame.width-10, 36)\n            //设置Item的宽度\n//            segmentedControl.setWidth(sw, forSegmentAtIndex: 0)\n//            segmentedControl.setWidth(sw, forSegmentAtIndex: 1)\n//            segmentedControl.setWidth(sw, forSegmentAtIndex: 2)\n//            segmentedControl.setWidth(sw, forSegmentAtIndex: 3)\n            //每个的宽度按segment的宽度平分\n            segmentedControl.apportionsSegmentWidthsByContent =  true\n        \n            //选中第几个segment 一般用于初始化时选中\n            segmentedControl.selectedSegmentIndex = 0\n            //风格\n            self.view.addSubview(segmentedControl)//添加到父视图\n            //添加事件\n            print(\"点击\")\n            segmentedControl.addTarget(self, action: \"selected\", forControlEvents: UIControlEvents.ValueChanged)\n\n          \n    }\n    \n    override func viewDidLayoutSubviews() {\n        yuding.frame = CGRectMake(0, 100, self.view.frame.width, self.view.frame.height-100)\n        \n        \n    }\n    \n    \n        override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n\n    // MARK: - Table view data source\n   \n  func numberOfSectionsInTableView(tableView: UITableView) -> Int {\n        // #warning Potentially incomplete method implementation.\n        // Return the number of sections.\n        return 1;\n    }\n\n    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        \n        // #warning Incomplete method implementation.\n        // Return the number of rows in the section.\n        return FinishDatas.count;\n    }\n\n    \n    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCellWithIdentifier(\"cell\", forIndexPath: indexPath) as! FinishTVCell\n        \n        let yud = FinishDatas[indexPath.row] as Finishinfo\n        cell.orderNo.text = \"订单编号:\\(yud.orderNo)\"\n        cell.serviceType.text = \"订单状态:\\(yud.orderStatus)\"\n        cell.facilitator.text = \"服务人员:\\(yud.servantName)\"\n        cell.servantName.text = \"服务类型:\\(yud.serviceType)\"\n        cell.servicePay.text = \"服务费用:\\(yud.servicePrice )元\"\n        //cell.pic.image = UIImage(named:yud.pic)\n\n        return cell\n    }\n    //分段选择器的函数\n    func selected() {\n        print(\"点击开始\")\n        //读取控件\n        let x = segmentedControl.selectedSegmentIndex\n        switch(x){\n        case 0:\n            orderStatus = \"\"\n            FinishDatas = refreshOrderData(customerid,orderStatus: orderStatus) as! [Finishinfo]\n            print(\"点击第一个\")\n            self.yuding.reloadData()\n\n            break\n      \n        case 1:\n            orderStatus = \"待付款\"\n            FinishDatas = refreshOrderData(customerid,orderStatus: orderStatus) as! [Finishinfo]\n            print(\"点击第3个\")\n            self.yuding.reloadData()\n            break\n        case 2:\n            orderStatus = \"服务中\"\n            FinishDatas = refreshOrderData(customerid,orderStatus: orderStatus) as! [Finishinfo]\n            print(\"点击第3个\")\n            self.yuding.reloadData()\n            break\n\n        default:\n            orderStatus = \"服务完成\"\n            FinishDatas = refreshOrderData(customerid,orderStatus: orderStatus) as! [Finishinfo]\n            print(\"点击其他\")\n            self.yuding.reloadData()\n            break\n        }\n        \n        \n    }\n    //确定单元格是否具有编辑功能\n    // Override to support conditional editing of the table view.\n//    override func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {\n//    // Return NO if you do not want the specified item to be editable.\n//    return true\n//    }\n//    //指定每一行的编辑类型\n//    override func tableView(tableView: UITableView, editingStyleForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCellEditingStyle {\n//        //允许删除操作\n//    return UITableViewCellEditingStyle.Delete\n//    }\n    //删除表单元格\n    //设置导航右边管理按钮\n//    func setRightDeleteButtonItem(){\n//        \n//        \n//        barButtonItem = UIBarButtonItem(title:\"管理\", style: .Done, target: self, action: \"RightButtonItemAction\")\n//        barButtonItem!.tag = 10;\n//        self.navigationItem.rightBarButtonItem = barButtonItem\n//    }\n    //管理按钮的函数\n//    func RightButtonItemAction(){\n//        \n//        if barButtonItem?.tag == 10{\n//            self.tableView.setEditing(true, animated: true);\n//            barButtonItem!.title = \"删除\"\n//            barButtonItem!.tag = 20;\n//        }\n//        else{\n//            \n//            self.tableView.setEditing(false, animated: true);\n//            barButtonItem!.title = \"管理\"\n//            barButtonItem!.tag = 20;\n//        }\n//        \n//    }\n\n    \n    // Override to support rearranging the table view.\n//    override func tableView(tableView: UITableView, moveRowAtIndexPath fromIndexPath: NSIndexPath, toIndexPath: NSIndexPath) {\n//    \n//    }\n\n    \n    \n    // Override to support conditional rearranging of the table view.\n//    override func tableView(tableView: UITableView, canMoveRowAtIndexPath indexPath: NSIndexPath) -> Bool {\n//    // Return NO if you do not want the item to be re-orderable.\n//    return true\n//    }\n\n    \n\n\n//    //从NSUerDefaults 中读取数据\n//    func readNSUerDefaults () {\n//        \n//        var userDefaultes = NSUserDefaults.standardUserDefaults()\n//        customerid = userDefaultes.stringForKey(\"customerID\")!\n//    }\n    \n    //删除cell事件\n//    override func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath){\n//        \n//        //删除数据源的对应数据\n//        //Infor.removeAtIndex(indexPath.row)\n//       var url: NSURL! = NSURL(string: HttpData.http+\"/FamilyServiceSystem/MobileServiceOrderAction?operation=_cancelOrder\")\n//        \n//        var request:NSMutableURLRequest = NSMutableURLRequest(URL:url, cachePolicy:NSURLRequestCachePolicy.UseProtocolCachePolicy,timeoutInterval: 10)\n//        \n//        request.HTTPMethod = \"POST\"\n//        var id:Int = Infor[indexPath.row].id\n//        var param:String = \"{\\\"id\\\":\\\"\\(id)\\\"}\"\n//        println(param)\n//        var data:NSData = param.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: true)!\n//        request.HTTPBody = data;\n//        var response:NSURLResponse?\n//        var error:NSError?\n//        var receiveData:NSData? = NSURLConnection.sendSynchronousRequest(request, returningResponse: &response, error: &error)\n//        if (error != nil)\n//        {\n//            println(error?.code)\n//            println(error?.description)\n//        }\n//        else\n//        {\n//            var jsonString = NSString(data:receiveData!, encoding: NSUTF8StringEncoding)\n//            println(\"jsonString\")\n//            println(jsonString)\n//            \n//        }\n//        \n//        let dict:AnyObject? = NSJSONSerialization.JSONObjectWithData(receiveData!, options: NSJSONReadingOptions.AllowFragments, error: nil)\n//        var dic = dict as! NSDictionary\n//        let serverResponse = dic.objectForKey(\"serverResponse\") as? String\n//        \n//        if serverResponse == \"Success\"{\n// \n//            //刷新数据\n//            yuding.reloadData()\n//            \n//            //tableView.beginUpdates()\n//            //删除数据源的对应数据\n//            FinishDatas.removeAtIndex(indexPath.row)\n//            println(\"删除后的数量\")\n//            println(Infor.count)\n//            //yuding.beginUpdates()\n//            //删除对应的cell\n//            self.yuding.deleteRowsAtIndexPaths([indexPath], withRowAnimation: UITableViewRowAnimation.Top)\n//            //yuding.endUpdates()\n//            //刷新数据\n//            //tableView.reloadData()\n//        }\n//        \n//        if serverResponse == \"Failed\"{\n//            \n//            let alert =  UIAlertView(title: \"删除失败\", message: \"请重试\", delegate: self, cancelButtonTitle: \"确定\")\n//            alert.show()\n//        }\n//        \n//\n//        \n////        //删除对应的cell\n////        tableView.deleteRowsAtIndexPaths([indexPath], withRowAnimation: UITableViewRowAnimation.Left)\n//        \n//        //数据源为空的时候管理按钮不能删除\n//        if self.FinishDatas.count == 0{\n//            barButtonItem?.enabled = false;\n//        }\n//        \n//    }\n//    //把delete 该成中文\n//    override func tableView(tableView: UITableView, titleForDeleteConfirmationButtonForRowAtIndexPath indexPath: NSIndexPath) -> String! {\n//        \n//        return \"删除\"\n//    }\n    ////导航条详情\n//    func reply (){\n//        self.dismissViewControllerAnimated(true, completion: nil)\n//    }\n//    \n//    func onMakeNavitem() -> UINavigationItem{\n//        println(\"创建导航条step1\")\n//        //创建一个导航项\n//        var navigationItem = UINavigationItem()\n//        //创建左边按钮\n//        var leftButton =  UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Reply, target: self, action: \"reply\")\n//        //var leftButton =  UIBarButtonItem(title: \"返回\", style: UIBarButtonItemStyle.Bordered, target: self, action: \"reply\")\n//        //导航栏的标题\n//        navigationItem.title = \"类别详情\"\n//        //设置导航栏左边按钮\n//        navigationItem.setLeftBarButtonItem(leftButton, animated: true)\n//        \n//        navigationBar?.pushNavigationItem(navigationItem, animated: true)\n//        \n//        \n//        return navigationItem\n//    }\n    \n    \n    //导航条详情\n    func reply (){\n//        self.dismissViewControllerAnimated(true, completion: nil)\n        let sb = UIStoryboard(name: \"Main\", bundle: nil)\n        let vc = sb.instantiateViewControllerWithIdentifier(\"MainVC\") \n        self.presentViewController(vc, animated: true, completion: nil)\n    }\n    \n    func onMakeNavitem() -> UINavigationItem{\n        print(\"创建导航条step1\")\n//        //创建一个导航项\n//        var navigationItem = UINavigationItem()\n        //创建左边按钮\n        let leftButton =  UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Reply, target: self, action: \"reply\")\n        //var leftButton =  UIBarButtonItem(title: \"返回\", style: UIBarButtonItemStyle.Bordered, target: self, action: \"reply\")\n        //导航栏的标题\n        navigationItem.title = \"订单列表\"\n        //设置导航栏左边按钮\n        navigationItem.setLeftBarButtonItem(leftButton, animated: true)\n        navigationBar?.pushNavigationItem(navigationItem, animated: true)\n   \n        \n        return navigationItem\n    }\n    override func  viewWillAppear(animated: Bool) {\n        \n        FinishDatas = refreshOrderData(customerid,orderStatus: orderStatus) as! [Finishinfo]\n        self.yuding.reloadData()\n        \n    }\n    \n\n\n    // 下拉刷新方法\n    func refresh() {\n \n\n        self.refreshControl.attributedTitle = NSAttributedString(string: \"Loading...\")\n \n         FinishDatas = refreshOrderData(customerid,orderStatus: orderStatus) as! [Finishinfo]\n        self.yuding.reloadData()\n        self.refreshControl.endRefreshing()\n        print(\"刷新好了\")\n     \n     }\n    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {\n        // Get the new view controller using [segue destinationViewController].\n        // Pass the selected object to the new view controller.\n        if segue.identifier==\"detail\"{\n            if let indexPath = self.yuding.indexPathForSelectedRow{\n                print(\"哈哈哈哈哈哈哈哈\")\n                let object = FinishDatas[indexPath.row] as Finishinfo\n                print",
 }
]

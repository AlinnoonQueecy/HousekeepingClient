[
 {
  "file": "/Users/zhang/Desktop/HouseKeeping 2/SHW/MainVC.swift",
  "offset": 2319,
  "remove": 19404,
  "text": "(\"进入定位状态\")\n        //指定最小距离更新(米)，默认：kCLDistanceFilterNone\n        BMKLocationService.setLocationDistanceFilter(10)\n        print(\"进入定位状态1111\")\n        locationService.startUserLocationService()\n        // 地理编码器初始化\n        geocodeSearch = BMKGeoCodeSearch()\n        \n        \n        AdvertiseDatas = refreshAdvertise() as! [HomeAdvertise]\n        let FirstTypeData = refreshParentType(\"\")//1\n        print(\"FirstTypeData\\(FirstTypeData.count)\")\n        print(\"进入定位状态\")\n        \n        \n      \n        \n        //var bounds:CGRect = self.view.bounds\n        let leadheight = self.view.bounds.height*0.11\n        let scrollviewheight = self.view.bounds.height*0.27\n        let pageCtrly = leadheight + scrollviewheight-self.view.bounds.height*0.03\n        let pageCtrlheight = 37\n        let ButtonScrolly = pageCtrly + CGFloat(pageCtrlheight)-5\n        let ButtonScrollheight = self.view.bounds.height*0.53\n        var lastheight = self.view.bounds.height*0.09\n        \n        \n        let tianqi = UIButton(frame: CGRect(x: 50, y: leadheight-35, width: 30, height:30))\n        self.view.addSubview(tianqi)\n        \n        //self.scrollView = UIScrollView(frame: CGRectMake(0, leadheight, bounds.width, bounds.height*0.245))\n        //1.设置图片UIScrollView\n        // scrollView.contentSize =  CGSize(width: bounds.width * CGFloat(range.count), height: bounds.height*0.27)\n        scrollView.contentSize =  CGSize(width: self.view.bounds.width * CGFloat(AdvertiseDatas.count), height: self.view.bounds.height*0.27)\n        scrollView.pagingEnabled = true  //设true时，会按页滑动\n        scrollView.bounces = false  //取消UIScrollView的弹性属性，这个可以按个人喜好来定\n        scrollView.delegate = self //UIScrollView的delegate函数在本类中定义\n        scrollView.showsHorizontalScrollIndicator = false//因为我们使用UIPageControl表示页面进度，所以取消UIScrollView自己的进度条。\n        print(location)\n        \n        // LocationB.titleLabel?.text = location\n        LocationB = UIButton(frame: CGRect(x: 20, y: leadheight-30, width: 100, height:23))\n        LocationB.titleLabel?.font = UIFont.systemFontOfSize(15)\n        LocationB.contentHorizontalAlignment = UIControlContentHorizontalAlignment.Left\n        LocationB.setTitle(location, forState: UIControlState.Normal)\n        LocationB.addTarget(self, action: \"toLocation:\", forControlEvents: UIControlEvents.TouchUpInside)\n        self.view.addSubview(LocationB)\n        \n        \n        \n        //2.设置图片滚动\n        \n        print(\"图片\")\n        for var i = 0; i < AdvertiseDatas.count; i++ {\n            print(\"数目：\\(AdvertiseDatas.count)\")\n            \n            let imgView:UIButton = UIButton(frame: CGRect(x: self.view.bounds.width*CGFloat(i), y:0, width: self.view.bounds.width, height: self.view.bounds.width*0.45) )\n            \n            //网络地址获取图片\n            //            //1.定义一个地址字符串常量\n            \n             imageUrlString = HttpData.http+\"/NationalService/\\(AdvertiseDatas[i].advertisePicture)\"\n         \n            //2.通过String类型，转换NSUrl对象\n            \n            print(\"url:\\(imageUrlString)\")\n           \n            let url:NSString = imageUrlString!.URLEncodedString()\n  \n            let data = getImageData(url as String)\n            if data == nil{\n                img = UIImage(named: HttpData.imgArray[i])\n                \n            }else{\n                img = UIImage(data: data!)\n            }\n            imgView.setBackgroundImage(img, forState: UIControlState.Normal)\n            \n     \n            \n            scrollView.addSubview( imgView )\n            //imgView.addTarget(self, action:\"clickImg:\" , forControlEvents: UIControlEvents.TouchUpInside)\n            \n            \n        }\n        \n        //3.添加图片标题\n        imgLabel = UILabel(frame: CGRect(x:0, y: leadheight+self.view.bounds.height*0.27-35, width: self.view.bounds.width, height: 30))\n        imgLabel.backgroundColor = UIColor.whiteColor()\n        imgLabel.alpha = 0.5\n        self.view.addSubview(imgLabel )\n        imgLabel.text = AdvertiseDatas[0].advertiseIntro\n        //imgLabel.text = \"hao\"\n        \n        //4.创建UIPageControl\n        //pageCtrl = [[UIPageControl alloc] initWithFrame:CGRectMake(0, 400, bounds.size.width, 30)];  //创建UIPageControl，位置在屏幕最下方。\n        pageCtrl.numberOfPages = AdvertiseDatas.count;//总的图片页数\n        pageCtrl.currentPage = 0; //当前页\n        pageCtrl.pageIndicatorTintColor = UIColor.grayColor()\n        pageCtrl.currentPageIndicatorTintColor = UIColor.redColor()\n        pageCtrl.addTarget(self, action:\"pageTurn:\" ,forControlEvents:UIControlEvents.ValueChanged) //用户点击UIPageControl的响应函数\n        //[self.view addSubview:pageCtrl];  //将UIPageControl添加到主界面上。\n        \n        //5.设置定时器（滑动切换图片）\n        var timer = NSTimer.scheduledTimerWithTimeInterval(3.5, target: self, selector: \"timerFireMethod:\", userInfo: nil, repeats:true);\n        print( \"end viewDidLoad\" )\n        \n        //创建buttonScroll\n        let terms =  FirstTypeData.count\n        let a = terms%3\n        if a == 0 {\n            ButtonScroll.contentSize = CGSizeMake(self.view.bounds.width, CGFloat(terms/3)*((ButtonScrollheight-4)/3+2))}\n        else{\n            ButtonScroll.contentSize = CGSizeMake(self.view.bounds.width, CGFloat(terms/3+1)*((ButtonScrollheight-4)/3+2))\n        }\n       \n        ButtonScroll.pagingEnabled = false\n        ButtonScroll.delegate = self\n        ButtonScroll.showsHorizontalScrollIndicator = false\n        ButtonScroll.showsVerticalScrollIndicator = false\n        ButtonScroll.bounces = false\n        //ButtonScroll.contentInset = UIEdgeInsetsMake(0, 0, -, 0)\n        self.automaticallyAdjustsScrollViewInsets = false\n        \n        //创建button\n        let button1C = UIColor  (red: 204/255, green: 255/255, blue: 0/255, alpha: 1.0)\n        let button2C = UIColor(red: 1.0, green: 153/255, blue: 102/255, alpha: 1.0)\n        let button3C = UIColor(red: 204/255, green: 204/255, blue: 255/255, alpha: 1.0)\n        let button4C = UIColor(red: 1.0, green: 153/255, blue: 153/255, alpha: 1.0)\n        let button5C = UIColor(red: 153/255, green: 204/255, blue: 255/255, alpha: 1.0)\n        let button6C = UIColor(red: 255/255, green: 153/255, blue: 204/255, alpha: 1.0)\n        let button7C = UIColor(red: 255/255, green: 204/255, blue: 0/255, alpha: 1.0)\n        let button8C = UIColor(red: 204/255, green: 204/255, blue: 204/255, alpha: 1.0)\n        let button9C = UIColor(red: 102/255, green: 204/255, blue: 255/255, alpha: 1.0)\n        var color = [button1C,button2C,button3C,button4C,button5C,button6C,button7C,button8C,button9C]\n        //var terms = HttpData.maintwo.count\n        //var terms =  FirstTypeData.count\n        let width = (self.view.bounds.width-20)/3\n        \n        // mainatwo的button\n        for var i = 0;i < terms;i++ {\n            let term1 = UIButton(frame: CGRectMake(8+(width+2)*CGFloat(i%3),CGFloat(i/3)*((ButtonScrollheight-4)/3+2), width,(ButtonScrollheight-4)/3))\n            print(term1.frame.origin.x)\n              print(term1.frame.origin.y)\n            term1 .setTitle(FirstTypeData[i] as? String, forState:UIControlState.Normal)\n            term1.setTitleShadowColor(UIColor.whiteColor(),forState: UIControlState.Normal)\n            \n            term1.backgroundColor = color[i%9]\n            term1.titleLabel?.font = UIFont.systemFontOfSize(16)\n            term1.showsTouchWhenHighlighted = true\n            term1.addTarget(self , action: Selector(\"tapped:\"), forControlEvents: UIControlEvents.TouchUpInside)\n            ButtonScroll.addSubview(term1)\n        }\n        \n     \n        \n        var buttontitle = [\"我的发布\",\"我的订单\",\"我的收藏\",\"我的信息\"]\n        var buttonimage = [\"mydingdan.png\",\"collect.png\",\"centeryuding.png\",\"mydingdan.png\",\"myinfo.png\"]\n        let buttonheight = self.view.bounds.height - ButtonScrolly - ButtonScrollheight\n        let buttony = ButtonScrolly + ButtonScrollheight\n        for var i = 0;i < 4;i++ {\n            let term1 = UIButton(frame: CGRectMake(3+((self.view.bounds.width-14)/4+2)*CGFloat(i%4),buttony+2,(self.view.bounds.width-14)/4,buttonheight-4))\n            term1 .setTitle(buttontitle[i] as String, forState:UIControlState.Normal)\n            term1.setTitleColor(UIColor.blackColor(), forState: UIControlState.Normal)\n            //term1.setTitleShadowColor(UIColor.whiteColor(),forState: UIControlState.Normal)\n            let color = UIColor  (red: 255/255, green: 127/255, blue: 27/255, alpha: 1.0)\n            term1.backgroundColor = color\n            term1.layer.cornerRadius = 5.0\n            //term1.setBackgroundImage(UIImage(named:buttonimage[i]), forState:UIControlState.Normal)\n            term1.titleLabel?.font = UIFont.systemFontOfSize(14)\n            term1.showsTouchWhenHighlighted = true\n            term1.addTarget(self , action: Selector(\"tapped:\"), forControlEvents: UIControlEvents.TouchUpInside)\n            self.view.addSubview(term1)\n        }\n        \n        \n \n        \n        \n    }\n    \n    \n    override func  viewDidLayoutSubviews() {\n        let bounds:CGRect = self.view.frame\n        let leadheight = bounds.height*0.11\n        let scrollviewheight = bounds.height*0.27\n        let pageCtrly = leadheight + scrollviewheight-bounds.height*0.03\n        let pageCtrlheight = 37\n        let ButtonScrolly = pageCtrly + CGFloat(pageCtrlheight)-5\n        var ButtonScrollheight = bounds.height*0.53\n        var lastheight = bounds.height*0.09\n        print(leadheight)\n        \n        lead.frame = CGRect(x: 0, y: 0, width: bounds.width, height: leadheight)\n        shouye.frame = CGRectMake(bounds.width/2-20, leadheight-30, 40, 23)\n        scrollView.frame = CGRectMake(0, leadheight+2, bounds.width, bounds.height*0.27)\n        pageCtrl.frame = CGRectMake(bounds.width*0.25, pageCtrly, bounds.width*0.5, CGFloat(pageCtrlheight) )\n        ButtonScroll.frame = CGRectMake(0, ButtonScrolly, bounds.width, bounds.height*0.53)\n    \n        \n        \n        \n    }\n    func toLocation(Location:UIButton){\n        print(\"怎么样了\")\n        // self.performSegueWithIdentifier(\"toLocation\", sender: self)\n        let sb = UIStoryboard(name: \"Main\", bundle: nil)\n        let vc = sb.instantiateViewControllerWithIdentifier(\"LocationVC\") \n        self.presentViewController(vc, animated: true, completion: nil)\n    }\n    \n    \n    // tapped函数，跳转\n    func tapped(term1:UIButton){\n        titleOfState = term1.titleForState(.Normal)!\n        //读取用户信息，如果不是第一次登录，则会自动登录\n        readNSUerDefaults()\n        print(\"标题\\(titleOfState)\")\n        //        if titleOfState == \"我的收藏\" || titleOfState == \"我的订单\"|| titleOfState == \"我的预定\"||  titleOfState == \"我的信息\"\n        //        {   if  customerid == \"\" || loginPassword == \"\"{\n        //            self.performSegueWithIdentifier(\"toLogin\", sender: self)\n        //\n        //          }else{\n        if titleOfState == \"我的收藏\" {\n            if  customerid == \"\" || loginPassword == \"\"{\n                self.performSegueWithIdentifier(\"toLogin\", sender: self)\n            }else {\n                \n                self.performSegueWithIdentifier(\"toCollection\", sender: self)\n            }\n        }else if titleOfState == \"我的订单\"{\n            if  customerid == \"\" || loginPassword == \"\"{\n                self.performSegueWithIdentifier(\"toLogin\", sender: self)\n            }else {\n                \n                self.performSegueWithIdentifier(\"tofinish\", sender: self)\n                \n            }\n            \n  \n            //\n        }else if titleOfState == \"我的发布\"{\n            if  customerid == \"\" || loginPassword == \"\"{\n                self.performSegueWithIdentifier(\"toLogin\", sender: self)\n            }else {\n                \n                self.performSegueWithIdentifier(\"toorder\", sender: self)\n                \n            }\n            \n        }else if titleOfState == \"我的信息\"{\n            \n            if  customerid == \"\" || loginPassword == \"\"{\n                self.performSegueWithIdentifier(\"toLogin\", sender: self)\n                \n                \n            }else {\n                \n                self.performSegueWithIdentifier(\"toMyInfo\", sender: self)\n            }\n            //          }else if titleOfState == \"更多\"{\n            //\n            //                let alert =  UIAlertView(title: \"\", message: \"尚未开放，敬请期待!\", delegate: self, cancelButtonTitle: \"确定\")\n            //                alert.show()\n            //\n            //\n            //\n        }else {\n            titleOfState = term1.titleForState(.Normal)!\n            let  serviceTypeData = refreshServiceType(titleOfState) as![ServiceType]\n            print(\"我点击的是:\\(titleOfState)\")\n            if serviceTypeData != [] {\n                self.performSegueWithIdentifier(\"toItem\", sender: self)\n            }else {\n                let alert =  UIAlertView(title: \"\", message: \"暂无数据，敬请期待!\", delegate: self, cancelButtonTitle: \"确定\")\n                alert.show()\n                \n            }\n        }\n    }\n    \n    \n    //6.定时器函数\n    func timerFireMethod(timer: NSTimer) {\n        \n        //令UIScrollView做出相应的滑动显示\n        self.pageCtrl.currentPage = (self.pageCtrl.currentPage+1)%AdvertiseDatas.count\n        let viewSize:CGSize  = scrollView.frame.size\n        let rect:CGRect = CGRect(x:CGFloat(self.pageCtrl.currentPage)*viewSize.width , y: 0, width: viewSize.width, height: viewSize.height)\n        scrollView.scrollRectToVisible(rect , animated:true);\n        imgLabel.text = AdvertiseDatas[pageCtrl.currentPage].advertiseIntro\n    }\n \n    \n    \n    //-------------------Table view data source-----------------------------\n    // 根据indexPath(section,row)创建每行cell及其内容\n    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {\n        //创建cell\n        let cellId:String = \"cellId\"\n        var cell:UITableViewCell? = tableView.dequeueReusableCellWithIdentifier( cellId ) \n        if cell == nil\n        {\n            cell = UITableViewCell(style:UITableViewCellStyle.Default, reuseIdentifier: cellId)\n            cell?.textLabel?.font = UIFont(name: \"Times New Roman\", size: 13)\n        }\n        \n        return cell!\n    }\n    \n    // Return the number of sections.\n    func numberOfSectionsInTableView(tableView: UITableView) -> Int {\n        return 0;//HttpData.channelTitles.count\n    }\n    \n    \n    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {\n        if segue.identifier! == \"toItem\" {\n            \n            //let controller = segue.destinationViewController.rootViewController as! Maintwo\n            let controller = segue.destinationViewController as! BusinessVC\n            //let controller = segue.destinationNavigationViewController as! Maintwo\n            \n            //println(destinationViewController.rootViewController)\n            let object = titleOfState\n            controller.FirstType = object\n            print(controller.FirstType)\n            print(\"fffffff\")\n            \n        }\n    }\n    //从NSUerDefaults 中读取数据\n    func readNSUerDefaults () {\n        \n        let userDefaultes = NSUserDefaults.standardUserDefaults()\n        if  (userDefaultes.stringForKey(\"customerID\")) != nil && (userDefaultes.stringForKey(\"loginPassword\")) != nil{\n            customerid = userDefaultes.stringForKey(\"customerID\")!\n            loginPassword = userDefaultes.stringForKey(\"loginPassword\")!\n            \n        }\n        print(\"location\")\n        if  (userDefaultes.stringForKey(\"location\")) != nil{\n            location = userDefaultes.stringForKey(\"location\")!\n            \n            print(location)\n        }\n        \n    }\n    \n    \n    \n    // 1.在地图将要启动定位时，会调用此函数\n    func willStartLocatingUser() {\n        print(\"启动定位……\")\n    }\n    // 2.用户位置更新后，会调用此函数\n    func didUpdateBMKUserLocation(userLocation: BMKUserLocation!) {\n        \n        self.userLocation = userLocation\n        print(\"目前位置：\\(userLocation.location.coordinate.longitude), \\(userLocation.location.coordinate.latitude)\")\n        var  Longtitude = userLocation.location.coordinate.longitude\n        var  Latitude = userLocation.location.coordinate.latitude\n        var response = RefreshLocation(customerid, realLongitude: \"\\(Longtitude)\", realLatitude: \"\\(Latitude)\")\n        print(\"更新客户位置:\\(response)\")\n        //为地理反编码准备\n        var point = CLLocationCoordinate2DMake(0, 0)\n        \n        point = CLLocationCoordinate2DMake(Latitude, Longtitude)\n        \n        var unGeocodeSearchOption = BMKReverseGeoCodeOption()\n        unGeocodeSearchOption.reverseGeoPoint = point\n        var flag = geocodeSearch.reverseGeoCode(unGeocodeSearchOption)\n        if flag {\n            print(\"反 geo 检索发送成功\")\n        }else {\n            print(\"反 geo 检索发送失败\")\n        }\n        \n        locationService.stopUserLocationService()\n        \n    }\n    // 用户方向更新后，会调用此函数\n    func didUpdateUserHeading(userLocation: BMKUserLocation!) {\n        \n    }\n    \n    // 在地图将要停止定位时，会调用此函数\n    func didStopLocatingUser() {\n        print(\"关闭定位\")\n        \n    }\n    \n    // 定位失败的话，会调用此函数\n    func didFailToLocateUserWithError(error: NSError!) {\n        print(\"定位失败！\")\n        \n    }\n    \n    \n    func onGetReverseGeoCodeResult(searcher: BMKGeoCodeSearch!, result: BMKReverseGeoCodeResult!, errorCode error: BMKSearchErrorCode) {\n        print(\"进入编码状态2\")\n        if error.rawValue == 0 {\n            \n            let city = result.addressDetail.city\n            print(\"city\\(result.addressDetail.city)\")\n//            var index = advance(city.endIndex, -1);\n//            let location = city.substringToIndex(index)\n            let location = city\n            saveNSUerDefaults ()\n            LocationB.setTitle(location, forState: UIControlState.Normal)\n           \n        }\n    }\n    \n    \n    \n    \n    //保存数据到NSUerDefaults\n    func saveNSUerDefaults () {\n        //将数据全部存储到NSUerDefaults中\n        let userDefaults:NSUserDefaults = NSUserDefaults.standardUserDefaults()\n        //存储时，除了NSNumber类型使用对应的类型外，其他的都使用setObject:forKey:\n        userDefaults.setObject( location, forKey: \"location\")\n        //建议同步到磁盘，但不是必须得\n        userDefaults.synchronize()\n    }\n    \n    override func viewWillAppear(animated: Bool) {\n        //读取用户信息，如果不是第一次登录，则会自动登录\n        readNSUerDefaults()\n        locationService.delegate = self\n        geocodeSearch.delegate = self\n        \n    }\n    override func viewWillDisappear(animated: Bool) {\n        \n        locationService.delegate = nil\n        print",
 }
]

[
 {
  "file": "/Users/zhang/Desktop/HouseKeeping 2/SHW/Register.swift",
  "offset": 1027,
  "remove": 12544,
  "text": "let pageWidth = self.view.frame.width\n        let pageHeight = self.view.frame.height\n        //实例化导航条\n        navigationBar = UINavigationBar(frame: CGRectMake(0, 0, self.view.frame.width, 64))\n        self.view.addSubview(navigationBar!)\n        print(\"创建导航条详情\")\n        onMakeNavitem()\n        \n        let terms = Register.count as Int\n        for var i = 0;i < terms;i++ {\n \n            let  image2 = UIImageView(frame:CGRectMake(CGFloat(15), CGFloat(12+64+i*57), CGFloat(34), CGFloat(34)))\n            image2.image = UIImage(named:image[i])\n            //label\n            let label2 = UILabel(frame: CGRectMake((CGFloat(52), CGFloat(12+64+i*57),CGFloat(90), CGFloat(34))))\n            label2.text = Register[i]\n            let n = CGFloat(32+64+57*4-40)\n            let agreement = UIButton(frame: CGRectMake(15,n , 150, 30))\n            agreement.setTitle(\"《生活网用户协议》\", forState: UIControlState.Normal)\n            agreement.setTitleColor(UIColor.blueColor(), forState: UIControlState.Normal)\n            agreement.backgroundColor = UIColor.whiteColor()\n            agreement.titleLabel?.font = UIFont.systemFontOfSize(14)\n            //            agreement.addTarget(self , action: Selector(\"tapped:\"), forControlEvents: UIControlEvents.TouchUpInside)\n            \n            let button = UIButton(frame: CGRectMake(pageWidth/2-125, pageHeight-70, 250, 30))\n            button.setTitle(\"同意以上协议并注册\", forState: UIControlState.Normal)\n            button.backgroundColor = UIColor.orangeColor()\n            button.titleLabel?.font = UIFont.systemFontOfSize(14)\n            button.showsTouchWhenHighlighted = true\n            button.addTarget(self , action: Selector(\"tapped:\"), forControlEvents: UIControlEvents.TouchUpInside)\n            button.layer.cornerRadius = 5.0\n            \n \n            self.view.addSubview(image2)\n            self.view.addSubview(label2)\n            self.view.addSubview(agreement)\n            self.view.addSubview(button)\n            \n        }\n        //文本框内容改变时，触发\n        NSNotificationCenter.defaultCenter().addObserver(self, selector: \"textDidChange\", name: UITextFieldTextDidChangeNotification, object: nil)\n        \n        \n        //textField\n        customerID = UITextField(frame: CGRectMake((CGFloat(135), CGFloat(12+64),CGFloat(pageWidth-150), CGFloat(34))))\n        customerID.borderStyle = UITextBorderStyle.RoundedRect\n        customerID.adjustsFontSizeToFitWidth=true  //当文字超出文本框宽度时，自动调整文字大小\n        customerID.minimumFontSize=14\n        customerID.becomeFirstResponder()\n        customerID.placeholder = \"请输入6至8位的账户名\"\n        customerID.delegate = self //设置代理\n        customerID.clearButtonMode=UITextFieldViewMode.WhileEditing  //编辑时出现清除按钮\n        customerID.returnKeyType = UIReturnKeyType.Go //表示完成输入，同时会跳到另一页\n        self.view.addSubview(customerID)\n        Label = UILabel(frame: CGRectMake((CGFloat(145), CGFloat(112),CGFloat(pageWidth-150), CGFloat(15))))\n        Label.font = UIFont.systemFontOfSize(13)\n        Label.textColor = UIColor.redColor()\n        self.view.addSubview(Label)\n        phoneNo = UITextField(frame: CGRectMake((CGFloat(135), CGFloat(12+64+1*57),CGFloat(pageWidth-150), CGFloat(34))))\n        phoneNo.borderStyle = UITextBorderStyle.RoundedRect\n        phoneNo.adjustsFontSizeToFitWidth=true  //当文字超出文本框宽度时，自动调整文字大小\n        phoneNo.minimumFontSize=14\n        phoneNo.becomeFirstResponder()\n        phoneNo.delegate = self //设置代理\n        phoneNo.clearButtonMode=UITextFieldViewMode.WhileEditing  //编辑时出现清除按钮\n        phoneNo.returnKeyType = UIReturnKeyType.Go //表示完成输入，同时会跳到另一页\n        self.view.addSubview(phoneNo)\n        \n        loginPassword = UITextField(frame: CGRectMake((CGFloat(135), CGFloat(12+64+2*57),CGFloat(pageWidth-150), CGFloat(34))))\n        loginPassword.borderStyle = UITextBorderStyle.RoundedRect\n        loginPassword.adjustsFontSizeToFitWidth=true  //当文字超出文本框宽度时，自动调整文字大小\n        loginPassword.minimumFontSize=14\n        loginPassword.becomeFirstResponder()\n        loginPassword.delegate = self //设置代理\n        loginPassword.placeholder = \"请输入6位密码\"\n        loginPassword.secureTextEntry = true\n        loginPassword.clearButtonMode=UITextFieldViewMode.WhileEditing  //编辑时出现清除按钮\n        loginPassword.returnKeyType = UIReturnKeyType.Go //表示完成输入，同时会跳到另一页\n        self.view.addSubview(loginPassword)\n        \n        Password = UITextField(frame: CGRectMake((CGFloat(135), CGFloat(12+64+3*57),CGFloat(pageWidth-150), CGFloat(34))))\n        Password.borderStyle = UITextBorderStyle.RoundedRect\n        Password.adjustsFontSizeToFitWidth=true  //当文字超出文本框宽度时，自动调整文字大小\n        Password.minimumFontSize=14\n        Password.becomeFirstResponder()\n        Password.delegate = self //设置代理\n        Password.placeholder = \"请再次输入密码\"\n        Password.secureTextEntry = true\n        Password.clearButtonMode=UITextFieldViewMode.WhileEditing  //编辑时出现清除按钮\n        Password.returnKeyType = UIReturnKeyType.Go //表示完成输入，同时会跳到另一页\n        self.view.addSubview(Password)\n\n\n\n        // Do any additional setup after loading the view.\n    }\n    //通知事件\n    func textDidChange(){\n        let customerid = customerID.text\n        //        var response = CheckID(customerid) as String\n        //        println(response)\n        let url: NSURL! = NSURL(string:HttpData.http+\"/NationalService/MobileCustomerInfoAction?operation=_checkCustomerID\")\n        \n        \n        let request:NSMutableURLRequest = NSMutableURLRequest(URL: url, cachePolicy:NSURLRequestCachePolicy.UseProtocolCachePolicy,timeoutInterval: 10)\n        \n        request.HTTPMethod = \"POST\"\n        \n        let param:String = \"{\\\"customerID\\\":\\\"\\(customerid)\\\"}\"\n        \n        let data:NSData = param.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: true)!\n        request.HTTPBody = data;\n        var response:NSURLResponse?\n        var error:NSError?\n        var receiveData:NSData?\n        do {\n            receiveData = try NSURLConnection.sendSynchronousRequest(request, returningResponse: &response)\n        } catch let error1 as NSError {\n            error = error1\n            receiveData = nil\n        }\n        if (error != nil)\n        {\n            print(error?.code)\n            print(error?.description)\n        }\n        else\n        {\n            let jsonString = NSString(data:receiveData!, encoding: NSUTF8StringEncoding)\n            print(jsonString)\n            \n        }\n        let dict:AnyObject? = try? NSJSONSerialization.JSONObjectWithData(receiveData!, options: NSJSONReadingOptions.AllowFragments)\n        var dic = dict as! NSDictionary\n        let serverResponse = dict!.objectForKey(\"serverResponse\") as? String\n        \n        print(\"RserverResponse:\\(serverResponse)\")\n        \n        if serverResponse == \"Failed\"{\n            \n            Label.text = \"该账号被占用！\"\n        }else if serverResponse == \"Success\"{\n            Label.text = \"\"\n        }\n        \n    }\n    \n    \n    func tapped(button:UIButton){\n    \n        if customerID.text.lengthOfBytesUsingEncoding(NSUTF8StringEncoding) > 8 || customerID.text.lengthOfBytesUsingEncoding(NSUTF8StringEncoding) <  6{\n            let alert = UIAlertView()\n            alert.title = \"\"\n            alert.message = \"请输入6到8位用户账号\"\n            alert.addButtonWithTitle(\"确定\")\n            alert.show()\n        }else if phoneNo.text.lengthOfBytesUsingEncoding(NSUTF8StringEncoding) != 11{\n            let alert = UIAlertView()\n            alert.title = \"\"\n            alert.message = \"请输入联系电话\"\n            alert.addButtonWithTitle(\"确定\")\n            alert.show()\n        }else if loginPassword.text == \"\"{\n            let alert = UIAlertView()\n            alert.title = \"\"\n            alert.message = \"请输入登录密码\"\n            alert.addButtonWithTitle(\"确定\")\n            alert.show()\n            \n        }else if loginPassword.text.lengthOfBytesUsingEncoding(NSUTF8StringEncoding) != 6 {\n            let alert = UIAlertView()\n            alert.title = \"\"\n            alert.message = \"请输入6位登录密码\"\n            alert.addButtonWithTitle(\"确定\")\n            alert.show()\n            \n        }else if Password.text != loginPassword.text{\n            let alert = UIAlertView()\n            alert.title = \"\"\n            alert.message = \"两次密码输入不同!\"\n            alert.addButtonWithTitle(\"确定\")\n            alert.show()\n\n        }else{\n            \n            var url: NSURL! = NSURL(string:HttpData.http+\"/NationalService/MobileCustomerInfoAction?operation=_add\")\n            \n            \n            var request:NSMutableURLRequest = NSMutableURLRequest(URL: url, cachePolicy:NSURLRequestCachePolicy.UseProtocolCachePolicy,timeoutInterval: 10)\n            \n            request.HTTPMethod = \"POST\"\n        \n            var param:String = \"{\\\"customerID\\\":\\\"\\(customerID.text)\\\",\\\"mobilePhone\\\":\\\"\\(phoneNo.text)\\\",\\\"loginPassword\\\":\\\"\\(loginPassword.text)\\\"}\"\n            print(\"param:\\(param)\")\n         \n            var data:NSData = param.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: true)!\n            request.HTTPBody = data;\n            var response:NSURLResponse?\n            var error:NSError?\n            var receiveData:NSData?\n            do {\n                receiveData = try NSURLConnection.sendSynchronousRequest(request, returningResponse: &response)\n            } catch var error1 as NSError {\n                error = error1\n                receiveData = nil\n            }\n            if (error != nil)\n            {\n                print(error?.code)\n                print(error?.description)\n            }\n            else\n            {\n                var jsonString = NSString(data:receiveData!, encoding: NSUTF8StringEncoding)\n                print(jsonString)\n                \n            }\n            \n            let json:AnyObject? = try? NSJSONSerialization.JSONObjectWithData(receiveData!, options: NSJSONReadingOptions.AllowFragments)\n            var serverResponse: String?\n            serverResponse = json!.objectForKey(\"serverResponse\") as? String\n            \n            \n            \n            \n            \n            if serverResponse == \"Success\" {\n                //self.performSegueWithIdentifier(\"\", sender: self)\n                let alert =  UIAlertView(title: \"注册成功\", message: \"请登录\", delegate: self, cancelButtonTitle: \"确定\")\n                alert.delegate = self\n                alert.show()\n                customerid = customerID.text\n                loginPwd = loginPassword.text\n                saveNSUerDefaults ()\n                \n            }\n            \n            if serverResponse == \"Failed\"{\n                \n                let alert =  UIAlertView(title: \"注册失败\", message: \"请重试\", delegate: self, cancelButtonTitle: \"确定\")\n                alert.show()\n            }\n            \n          }\n        \n    }\n    //UIAlert触发函数\n    func  alertView(alertView: UIAlertView, clickedButtonAtIndex buttonIndex: Int) {\n        self.dismissViewControllerAnimated(true, completion: nil)\n        \n        //self.performSegueWithIdentifier(\"back\", sender: self)\n    }\n    //导航条详情\n    func reply (){\n        self.dismissViewControllerAnimated(true, completion: nil)\n    }\n    \n    func onMakeNavitem() -> UINavigationItem{\n        print(\"创建导航条step1\")\n        //创建一个导航项\n        let navigationItem = UINavigationItem()\n        //创建左边按钮\n        let leftButton =  UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Reply, target: self, action: \"reply\")\n        //var leftButton =  UIBarButtonItem(title: \"返回\", style: UIBarButtonItemStyle.Bordered, target: self, action: \"reply\")\n        //导航栏的标题\n        navigationItem.title = \"注册详情\"\n        //设置导航栏左边按钮\n        navigationItem.setLeftBarButtonItem(leftButton, animated: true)\n        \n        navigationBar?.pushNavigationItem(navigationItem, animated: true)\n        \n        \n        return navigationItem\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n    //保存数据到NSUerDefaults\n    func saveNSUerDefaults () {\n        //将数据全部存储到NSUerDefaults中\n        let",
 }
]

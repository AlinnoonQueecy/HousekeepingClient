[
 {
  "file": "/Users/zhang/Desktop/HouseKeeping 2/SHW/getLocationController.swift",
  "offset": 787,
  "remove": 6468,
  "text": "let width = self.view.frame.width\n        //实例化导航条\n        navigationBar = UINavigationBar(frame: CGRectMake(0, 0, width, 64))\n        self.view.addSubview(navigationBar!)\n        print(\"创建导航条详情B\")\n        onMakeNavitem()\n        \n        locationManager.delegate = self\n        //设备使用电池供电时最高的精度\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        //精确到1000米,距离过滤器，定义了设备移动后获得位置信息的最小距离\n        locationManager.distanceFilter = kCLLocationAccuracyKilometer\n        if self.locationManager.respondsToSelector(\"requestAlwaysAuthorization\"){\n            locationManager.requestAlwaysAuthorization()\n            print(\"requestAlwaysAuthorization\")\n            \n            \n        }\n        \n        locationManager.startUpdatingLocation()\n         print(\"定位开始1111\")\n      \n    }\n    \n    //导航条详情\n    func reply (){\n       // self.dismissViewControllerAnimated(true, completion: nil)\n        self.performSegueWithIdentifier(\"toLocation\", sender: self)\n    }\n \n    \n    \n    func onMakeNavitem() -> UINavigationItem{\n        print(\"创建导航条step1b\")\n        //创建一个导航项\n        let navigationItem = UINavigationItem()\n        //创建左边.右边按钮\n        let leftButton =  UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.Reply, target: self, action: \"reply\")\n\n        //rightButton.title = \"好吧\"\n        //导航栏的标题\n        navigationItem.title = \"选择城市\"\n        //设置导航栏左边按钮\n        navigationItem.setLeftBarButtonItem(leftButton, animated: true)\n        navigationBar?.pushNavigationItem(navigationItem, animated: true)\n        \n        \n        return navigationItem\n    }\n\n    \n    //    func locationManager(manager: CLLocationManager!, didChangeAuthorizationStatus status: CLAuthorizationStatus) {\n    //        if status ==  CLAuthorizationStatus.NotDetermined || status == CLAuthorizationStatus.Denied{\n    //            //允许使用定位服务\n    //            //开始使用定位服务\n    //            locationManager.startUpdatingLocation()\n    //                println(\"定位开始1111\")\n    //\n    //        }\n    //    }\n    override func viewWillAppear(animated: Bool) {\n        \n        locationManager.startUpdatingLocation()\n        print(\"定位开始2222\")\n    }\n    \n//        override func viewWillDisappear(animated: Bool) {\n//            locationManager.stopUpdatingLocation()\n//            println(\"定位结束\")\n//        }\n    \n    \n \n    func  locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n    \n        print(\"定位进行中1\")\n        //获取最新坐标\n        currLocation = locations.last as! CLLocation\n        \n       if (currLocation.horizontalAccuracy > 0) {\n            locationManager.stopUpdatingLocation()\n            print(\"定位结束\")\n            let longitude = currLocation.coordinate.longitude\n            let latitude = currLocation.coordinate.latitude\n        \n        \n            let url = NSURL(string:\"http://gc.ditu.aliyun.com/regeocoding?l=\\(longitude),\\(latitude)&type=100\")\n            print(url)\n \n            let data = try? NSData(contentsOfURL: url!, options: NSDataReadingOptions.DataReadingUncached)\n            var   str = NSString(data: data! ,encoding: NSUTF8StringEncoding)\n        \n       \n            let json: AnyObject? = try? NSJSONSerialization.JSONObjectWithData(data!, options: NSJSONReadingOptions.AllowFragments)\n        \n            let test2: AnyObject?=json!.objectForKey(\"addrList\")\n    \n            let jsonArray = test2 as? NSArray\n        \n        \n            var count = jsonArray?.count\n            var pictureName:String = \"\"\n            for value in jsonArray!{\n            \n             pictureName  =  value.objectForKey(\"admName\") as! String\n           \n       \n            print(pictureName)\n                var city :String\n               \n            //将字符串切割成数组\n            if pictureName != \"\" {\n                \n            range = pictureName.componentsSeparatedByString(\",\")\n            print(\"图片字符串长度\\(range.count)\")\n      \n            if range[0] as! String == \"上海市\"||range[0] as! String == \"北京市\"||range[0] as! String == \"重庆市\"||range[0] as! String == \"天津市\"||range[0] as! String == \"香港特别行政区\"||range[0] as! String == \"澳门特别行政区\" {\n                city = self.range[0] as! String\n               \n                let index = city.endIndex.advancedBy(-1);\n             \n                \n                self.location = city.substringToIndex(index)\n                print(\"location:\\(location)\")\n                \n//            self.location = self.range[0] as! String\n                }else {\n                city = self.range[1] as! String\n                \n                let index = city.endIndex.advancedBy(-1);\n                \n                \n                self.location = city.substringToIndex(index)\n                print(\"location:\\(location)\")\n//                    self.location = self.range[1] as! String\n                }\n              }else {\n                print(\"我是空的\")\n                self.location = \"沈阳\"\n                }\n                saveNSUerDefaults()\n                label.text = location\n                \n        }\n      }\n    }\n    \n    func locationManager(manager: CLLocationManager, didFailWithError error: NSError) {\n        print(error)\n        if let  clErr = CLError(rawValue: error.code) {\n            switch clErr {\n            case .LocationUnknown:\n                print(\"位置不明\")\n            case .Denied :\n                print(\"允许检索位置被拒绝\")\n            case .Network:\n                print(\"用于检索位置的网络不可用\")\n            default:\n                print(\"未知的位置错误\")\n            }\n            \n        } else {\n            print (\"其他错误\")\n            let alert = UIAlertView (title: \"提示信息\", message: \"定位失败\", delegate: nil, cancelButtonTitle: \"确定\")\n            alert.show()\n        }\n    }\n \n    \n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        \n    }\n    //保存数据到NSUerDefaults\n    func saveNSUerDefaults () {\n        //将数据全部存储到NSUerDefaults中\n        let",
 }
]
